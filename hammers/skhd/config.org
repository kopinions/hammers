#+TITLE: SKHD(Hotkey binding)
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: macos hotkey binding
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** skhd 配置
   #+BEGIN_SRC conf :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/skhd/skhdrc") :tangle-mode (identity #o755) :comments link
     #  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
     #                     be found at https://github.com/koekeishiya/skhd/issues/1
     #
     #                     A hotkey is written according to the following rules:
     #
     #                       hotkey       = <mode> '<' <action> | <action>
     #
     #                       mode         = 'name of mode' | <mode> ',' <mode>
     #
     #                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
     #                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
     #                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
     #
     #                       keysym       = <mod> '-' <key> | <key>
     #
     #                       mod          = 'modifier keyword' | <mod> '+' <mod>
     #
     #                       key          = <literal> | <keycode>
     #
     #                       literal      = 'single letter or built-in keyword'
     #
     #                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
     #
     #                       proc_map_lst = * <proc_map>
     #
     #                       proc_map     = <string> ':' <command> | <string>     '~' |
     #                                      '*'      ':' <command> | '*'          '~'
     #
     #                       string       = '"' 'sequence of characters' '"'
     #
     #                       command      = command is executed through '$SHELL -c' and
     #                                      follows valid shell syntax. if the $SHELL environment
     #                                      variable is not set, it will default to '/bin/bash'.
     #                                      when bash is used, the ';' delimeter can be specified
     #                                      to chain commands.
     #
     #                                      to allow a command to extend into multiple lines,
     #                                      prepend '\' at the end of the previous line.
     #
     #                                      an EOL character signifies the end of the bind.
     #
     #                       ->           = keypress is not consumed by skhd
     #
     #                       *            = matches every application not specified in <proc_map_lst>
     #
     #                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
     #
     #  NOTE(koekeishiya): A mode is declared according to the following rules:
     #
     #                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
     #                                   '::' <name> '@'               | '::' <name>
     #
     #                       name      = desired name for this mode,
     #
     #                       @         = capture keypresses regardless of being bound to an action
     #
     #                       command   = command is executed through '$SHELL -c' and
     #                                   follows valid shell syntax. if the $SHELL environment
     #                                   variable is not set, it will default to '/bin/bash'.
     #                                   when bash is used, the ';' delimeter can be specified
     #                                   to chain commands.
     #
     #                                   to allow a command to extend into multiple lines,
     #                                   prepend '\' at the end of the previous line.
     #
     #                                   an EOL character signifies the end of the bind.

     # focus window
     # alt - x : yabai -m window --focus recent
     # alt - h : yabai -m window --focus west
     # alt - j : yabai -m window --focus south
     # alt - k : yabai -m window --focus north
     # alt - l : yabai -m window --focus east

     # swap window
     # shift + alt - x : yabai -m window --swap recent
     # shift + alt - h : yabai -m window --swap west
     # shift + alt - j : yabai -m window --swap south
     # shift + alt - k : yabai -m window --swap north
     # shift + alt - l : yabai -m window --swap east

     # move window
     # shift + cmd - h : yabai -m window --warp west
     # shift + cmd - j : yabai -m window --warp south
     # shift + cmd - k : yabai -m window --warp north
     # shift + cmd - l : yabai -m window --warp east

     # balance size of windows
     shift + cmd - 0      : yabai -m window --grid 1:1:0:0:1:1

     # Floating windows can also be moved and resized at the same time by placing them on a grid.
     # The grid format is <rows>:<cols>:<start-x>:<start-y>:<width>:<height>

     # make floating window fill top-half of screen
     shift + cmd - up     : yabai -m window --grid 2:1:0:0:1:1
     # make floating window fill bottom-half of screen
     shift + cmd - down   : yabai -m window --grid 2:1:0:1:1:1

     # make floating window fill left-half of screen
     shift + cmd - left   : yabai -m window --grid 1:2:0:0:1:1

     # make floating window fill right-half of screen
     shift + cmd - right  : yabai -m window --grid 1:2:1:0:1:1

     shift + cmd - c  :     yabai -m window --grid 6:4:1:1:2:4

     # create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
     # shift + cmd - n : yabai -m space --create && \
     #                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
     #                   yabai -m window --space "${index}" && \
     #                   yabai -m space --focus "${index}"

     # create desktop and follow focus - uses jq for parsing json (brew install jq)
     # cmd + alt - n : yabai -m space --create && \
     #                 index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
     #                 yabai -m space --focus "${index}"

     # send window to monitor and follow focus
     ctrl + cmd - x  : yabai -m window --display recent && yabai -m display --focus recent
     ctrl + cmd - z  : yabai -m window --display prev && yabai -m display --focus prev
     ctrl + cmd - c  : yabai -m window --display next && yabai -m display --focus next
     ctrl + cmd - 1  : yabai -m window --display 1 && yabai -m display --focus 1
     ctrl + cmd - 2  : yabai -m window --display 2 && yabai -m display --focus 2
     ctrl + cmd - 3  : yabai -m window --display 3 && yabai -m display --focus 3

     # move window
     shift + ctrl - a : yabai -m window --move rel:-20:0
     shift + ctrl - s : yabai -m window --move rel:0:20
     shift + ctrl - w : yabai -m window --move rel:0:-20
     shift + ctrl - d : yabai -m window --move rel:20:0


     # toggle window parent zoom
     alt - d : yabai -m window --toggle zoom-parent

     # toggle window fullscreen zoom
     alt - f : yabai -m window --toggle zoom-fullscreen

     # toggle window native fullscreen
     shift + alt - f : yabai -m window --toggle native-toggle

     # fullscreen window split type
     alt - e : yabai -m window --toggle split

     # float / unfloat window and restore position
     # alt - t : yabai -m window --toggle float && /tmp/yabai-restore/$(yabai -m query --windows --window | jq -re '.id').restore 2>/dev/null || true
     alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

     # toggle sticky (show on all spaces)
     alt - s : yabai -m window --toggle sticky

     # toggle topmost (keep above other windows)
     alt - o : yabai -m window --toggle topmost

     # toggle picture-in-picture
     alt - p : yabai -m window --toggle border --toggle pip

     # change layout of desktop
     # ctrl + alt - a : yabai -m space --layout bsp
     ctrl + alt - d : yabai -m space --layout float
     ctrl + alt - s : yabai -m space --layout $(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "float" else "bsp" end')
   #+END_SRC
