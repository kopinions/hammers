#+TITLE: hammerspoon ÈÖçÁΩÆ
#+AUTHOR: Â≠ôÂª∫Â∫∑Ôºàrising.lambdaÔºâ
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: A hammerspoon Initialization script, loaded by the init.lua file.
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

*** hammerspoon use xdg config
    #+BEGIN_SRC shell :eval (or (and (eq m/os 'macos) "yes") "never") :shebang #!/bin/bash :exports none :tangle no :results output silent :noweb yes :prologue "exec 2>&1" :epilogue ":" :comments link
      defaults write org.hammerspoon.Hammerspoon MJConfigFile "~/.config/hammerspoon/init.lua"
    #+END_SRC

*** ÈÄöÁî®ÊñπÊ≥ï
    #+BEGIN_SRC lua :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/xdg.conf.d}/hammerspoon/functions.lua")) "no") :mkdirp yes
      local log = hs.logger.new('init.lua', 'debug')

      function filter(func, tbl)
         local newtbl= {}
         for k,v in pairs(tbl) do
            if func(v) then
               table.insert(newtbl, v)
            end
         end
         return newtbl
      end

      function map(func, tbl)
         local newtbl = {}
         for i,v in pairs(tbl) do
            newtbl[i] = func(v)
         end
         return newtbl
      end
    #+END_SRC
*** hammerspoon Âü∫Á°ÄÈÖçÁΩÆÔºàÊèí‰ª∂Ôºå‰ªìÂ∫ìÔºâ
    #+BEGIN_SRC lua :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/xdg.conf.d}/hammerspoon/init.lua")) "no") :mkdirp yes :noweb yes :link comment
      hs.loadSpoon("SpoonInstall")
      
      spoon.SpoonInstall.use_syncinstall = true
      require('functions')

      -- spoon.SpoonInstall.repos.zzspoons = {
      --    url = "https://github.com/zzamboni/zzSpoons",
      --    desc = "zzamboni's spoon repository",
      -- }

      -- Install=spoon.SpoonInstall
      -- Install:updateRepo()
      -- Install:installSpoonFromRepo("WindowHalfsAndThirds")

      log = hs.logger.new('init.lua', 'debug')
    #+END_SRC
*** hammerspoon ‰∏çÂêåÂ∫îÁî®Ëá™Âä®ÂàáÊç¢Âø´Êç∑ÈîÆ
    #+NAME: capture
    #+BEGIN_SRC elisp :var capture=(m/resolve "${m/xdg.conf.d}/emacs/bin/capture")
      capture
    #+END_SRC
*** hammerspoon Ê†πÊçÆ‰∏çÂêåÂ∫îÁî®Ëá™Âä®ÂàáÊç¢ËæìÂÖ•Ê≥ï
    #+BEGIN_SRC lua :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/xdg.conf.d}/hammerspoon/init.lua")) "no") :mkdirp yes :noweb yes :link comment
      apps = {
         {
            name = 'Emacs',
            im = 'EN'
         },
         {
            name = 'Google Chrome',
            im = 'EN'
         },
         {
            name = 'Wechat',
            im = 'CN'
         },
         {
            name = 'DingTalk',
            im = 'CN'
         },
         {
            name = 'OmniFocus',
            im = 'CN'
         },
         {
            name = 'Numbers',
            im = 'CN'
         },
         {
            name = 'Pages',
            im = 'CN'
         },
         {
            name = 'Keynote',
            im = 'CN'
         },
         {
            name = 'Xmind',
            im = 'CN'
         },
         {
            name = 'MacDown',
            im = 'CN'
         },
         {
            name = 'Microsoft Word',
            im = 'CN'
         }
      }

      function ims(name, etype, app)
         if (etype == hs.application.watcher.activated) then
            config = filter(
               function(item)
                  return string.match(name:lower(), item.name:lower())
               end,
               apps)

            if next(config) ~= nil then
               local current = hs.keycodes.currentSourceID()

               if (current ~= "com.tencent.inputmethod.wetype.pinyin" and string.match (config [1].im, "CN")) then
                  -- hs.keycodes.currentSourceID("com.apple.keylayout.US")
                  hs.keycodes.currentSourceID("com.tencent.inputmethod.wetype.pinyin")
               elseif (current ~= "com.apple.keylayout.US" and string.match (config [1].im, "EN")) then
                  hs.keycodes.currentSourceID("com.apple.keylayout.US")
               end
            else
               hs.keycodes.currentSourceID("com.apple.keylayout.US")
            end
         end
      end

      -- auto change the im for the application
      imWatcher = hs.application.watcher.new(ims)
      imWatcher:start()
    #+END_SRC
*** ÈÄöËøáÊúçÂä°ÁõëÂê¨ÈÖçÁΩÆÁï™ËåÑ
    #+BEGIN_SRC lua :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/xdg.conf.d}/hammerspoon/init.lua")) "no") :mkdirp yes :noweb yes :link comment 
      pomodoro = require("pomodoro").new()

      svr =
         (
            function ()
               local svr = hs.httpserver.new(false, false);
               svr:setInterface("127.0.0.1")
               svr:setPort(13140)
               svr:setCallback(
                  function (method, url, headers, body)
                     local payload = hs.json.decode(body)
                     log.i (payload.type, payload.title)
                     if (payload.type == "FOCUSED") then
                        pomodoro:focused(payload)
                     elseif (payload.type == "UNFOCUSED") then
                        payload.title = "‰ºëÊÅØ"
                        pomodoro:unfocused(payload)
                     end

                     return "", 200, {}
                  end
               )
               svr:start()
               return svr
            end
         )()

      hs.notify.new({title='Hammerspoon', informativeText='Ready to rock ü§ò'}):send()
    #+END_SRC

*** hammerspoon Áï™ËåÑÂ∑•‰ΩúÊ≥ï
    #+NAME: dndpath
    #+BEGIN_SRC elisp :var path=(m/resolve "${m/home.d}/.local/bin/")
      path
    #+END_SRC
    
    #+BEGIN_SRC lua :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/xdg.conf.d}/hammerspoon/pomodoro.lua")) "no") :mkdirp yes :noweb yes :link comment
      local pomodoro = {}

      function pomodoro.new()
         local o = {}

         setmetatable(o, pomodoro)
         local mt = {
            focused = pomodoro.focused,
            unfocused = pomodoro.unfocused,
            focus = pomodoro.focus,
            unfocus = pomodoro.unfocus,
            timer = nil,
            canvas = (
               function ()
                  local w,h = 500, 100;
                  local frame = hs.screen.primaryScreen():fullFrame()
                  canvas = hs.drawing.text(hs.geometry.rect(frame.w - w, frame.h - h, w , h), "")
                  canvas:setBehavior(hs.drawing.windowBehaviors["default"])
                  return canvas
               end
            )()
            
         }
         pomodoro.__index = mt
         return o
      end

      function pomodoro:show(text)
         self.canvas:show()
         local content = hs.styledtext.new(
            text,
            {
               font = {
                  name = "Heiti SC",
                  size = 30
               },
               color = hs.drawing.color.asRGB({hex= "#f8d25c", alpha= 1}),
               --         backgroundColor = hs.drawinng.color.asRGB({hex= "#ffffff", alpha= 1}),
               paragraphStyle = {
                  alignment = "right",
               }
            }
         )
         local frame = hs.screen.primaryScreen():fullFrame()
         local ts = hs.drawing.getTextDrawingSize(content)
         local padding = {
            right = 16,
            bottom = 16
         }
         local ok, object, descriptor = hs.osascript.applescript([[
            global dock_showed
            global dock_width
            global dock_height
            set dock_height to 0
            set dock_width to 0
            tell application "System Events"
                    set dock_showed to false
                    tell dock preferences
                            set dock_showed to not autohide
                    end tell
                    tell process "Dock"
                            if (dock_showed) then
                                    set dock_dimensions to size in list 1
                                    set dock_width to item 1 of dock_dimensions
                                    set dock_height to item 2 of dock_dimensions
                            end if
                    end tell
            end tell
            return dock_height
         ]])

         if (ok) then
            self.canvas:setTopLeft(hs.geometry.point(frame.w - ts.w - padding.right, frame.h - object - ts.h  - padding.bottom))
         else
            self.canvas:setTopLeft(hs.geometry.point(frame.w - ts.w - padding.right, frame.h - ts.h  - padding.bottom))
         end


         self.canvas:setSize(hs.geometry.size (ts.w + padding.right, ts.h + padding.bottom))
         self.canvas:setStyledText(content)
      end

      function dnd(status)
         if(status) then
            hs.execute("<<dndpath()>>" .. "/dnd_on")
         else
            hs.execute("<<dndpath()>>" .. "/dnd_off")
         end
      end

      function pomodoro:focused(config)
         hs.notify.new(
            function()
            end,
            {
               title = "Pomodoro",
               informativeText = "‰ªªÂä°Â∑≤ÁªèÂºÄÂßãÔºåÂä†Ê≤πÂêßÔºÅÔºÅÔºÅ",
               subTitle = "",
               autoWithdraw = true,
               withdrawAfter = 3,
            }
         ):send()


         if(self.timer ~= nil) then
            self.timer:stop()
         end
         local tick = tonumber(config.duration) * 60
         self.timer = hs.timer.doUntil(
            function()
               return tick <= 0
            end,
            function()
               tick = tick - 1
               pomodoro.show(self, config.title .. "[" .. math.floor(tick/60) .. ":" .. string.format("%02d", tick % 60) .. "]")
            end,
            1
         ):fire():start()
         dnd(true)
         hs.notify.withdrawAll()
      end


      function pomodoro:unfocused(config)
         dnd(false)
         hs.notify.withdrawAll()
         hs.notify.new(
            function()
            end,
            {
               title = "Pomodoro",
               informativeText = "‰ªªÂä°Â∑≤ÁªèÁªìÊùüÔºå‰ºëÊÅØ‰∏Ä‰ºöÂÑøÂêßÔºÅÔºÅÔºÅ",
               subTitle = "‰ºëÊÅØÂêß",
               autoWithdraw = true,
               withdrawAfter = 3,
            }
         ):send()

         if(self.timer ~= nil) then
            self.timer:stop()
         end

         local tick = tonumber(config.duration) * 60
         self.timer = hs.timer.doUntil(
            function()
               return tick <= 0
            end,
            function()
               tick = tick - 1
               if (tick > 0) then
                  pomodoro.show(self, config.title .. "[" .. math.floor(tick/60) .. ":" .. string.format("%02d", tick % 60) .. "]")
               else
                  pomodoro.show(self, "ÂáÜÂ§áÂ∑•‰ΩúÂêßÔºü")
                  hs.notify.new(
                     function()
                        local emacs = hs.appfinder.appFromName("Emacs")
                        local agenda = function(app)

                           hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, true):post(app)
                           hs.eventtap.event.newKeyEvent("g", true):post(app)
                           hs.eventtap.event.newKeyEvent("g", false):post(app)
                           hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, false):post(app)

                           hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, true):post(app)
                           hs.eventtap.event.newKeyEvent("g", true):post(app)
                           hs.eventtap.event.newKeyEvent("g", false):post(app)
                           hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, false):post(app)

                           hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, true):post(app)
                           hs.eventtap.event.newKeyEvent("c", true):post(app)
                           hs.eventtap.event.newKeyEvent("c", false):post(app)
                           hs.eventtap.event.newKeyEvent(hs.keycodes.map.ctrl, false):post(app)

                           hs.eventtap.event.newKeyEvent("a", true):post(app)
                           hs.eventtap.event.newKeyEvent("a", false):post(app)

                           hs.eventtap.event.newKeyEvent("a", true):post(app)
                           hs.eventtap.event.newKeyEvent("a", false):post(app)

                           hs.eventtap.event.newKeyEvent("r", true):post(app)
                           hs.eventtap.event.newKeyEvent("r", false):post(app)
                        end
                        if (emacs == nil) then
                           emacs = hs.application.open("Emacs")
                        end

                        emacs:activate()
                        hs.timer.doAfter(
                           2,
                           function()
                              agenda(emacs)
                           end
                        )

                     end,
                     {
                        title = "Pomodoro",
                        informativeText = "ÂºÄÂßãÂ∑•‰ΩúÂêßÔºü",
                        autoWithdraw = true,
                        withdrawAfter = 36000,
                        alwaysPresent = true,
                        hasActionButton = true,
                        actionButtonTitle = "Â•Ω"
                     }
                  ):send()
               end
            end,
            1
         ):fire():start()
      end

      return pomodoro
    #+END_SRC

