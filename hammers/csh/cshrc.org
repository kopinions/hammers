#+TITLE:  csh ÈÖçÁΩÆ
#+AUTHOR: Â≠ôÂª∫Â∫∑Ôºàrising.lambdaÔºâ
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: csh ÈÖçÁΩÆÊñá‰ª∂
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

    
*** cshrc
    #+BEGIN_SRC sh :tangle (m/resolve "${m/home.d}/.cshrc") :eval never :exports code :comments link
      setenv LANG en_US.UTF-8
      setenv JAVA_HOME "/Library/Java/JavaVirtualMachines/openjdk-13.0.1.jdk/Contents/Home"
      setenv EDITOR vim
      setenv DISABLE_AUTO_TITLE true

      setenv XDG_CONFIG_HOME ${HOME}/.config
      setenv XDG_CACHE_HOME ${HOME}/.cache
      setenv XDG_DATA_HOME ${HOME}/.local/share
      mkdir -p ${XDG_CACHE_HOME} ${XDG_DATA_HOME} ${XDG_CONFIG_HOME}
      mkdir -p ${XDG_DATA_HOME}/{csh,less,git}

      setenv RIPGREP_CONFIG_PATH ${XDG_CONFIG_HOME}/ripgrep/config
      setenv VIMINIT 'source "$XDG_CONFIG_HOME/vim/vimrc"'
      setenv VIMDOTDIR "$XDG_CONFIG_HOME/vim"

      setenv LESSHISTFILE "${XDG_DATA_HOME}/less/history"
      setenv LESSKEY "${XDG_CONFIG_HOME}/less/keys"

      setenv GEM_SPEC_CACHE ${XDG_CACHE_HOME}/rubygems/cache

      setenv INPUTRC ${XDG_CONFIG_HOME}/readline/inputrc
      setenv GNUPGHOME ${XDG_CONFIG_HOME}/gnupg

      foreach file (`find ${XDG_CONFIG_HOME}/csh/init -name "*.csh"|sort`)
           source "${file}"
      end

      foreach file (`find ${XDG_CONFIG_HOME}/csh/post -name "*.csh"`)
         source "${file}"
      end
    #+END_SRC

*** csh completion & list
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/completion.csh") :eval never :exports code :comments link
      set autolist
    #+END_SRC
    
*** csh alias
     #+NAME: csh_conf_root
     #+BEGIN_SRC sh :var csh_conf_root=(m/resolve "${m/xdg.conf.d}/csh") :results output
       echo "set csh_conf_root=\"$csh_conf_root\""
     #+END_SRC
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/alias.csh") :eval never :exports code :comments link :noweb tangle
      <<csh_conf_root()>>
      foreach file (`find  $csh_conf_root/init/alias  -name "*.csh"`)
         source "${file}"
      end
    #+END_SRC
**** common
     #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/alias/common.csh") :eval never :exports code :comments link
       alias ll 'ls-F -l '      #long list
       alias ls 'ls-F'      #long list
       alias lrt 'ls-F -ltrch'
     #+END_SRC
     
**** git alias
     #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/alias/git.csh") :eval never :exports code :comments link
       alias gst 'git status'
       alias ga 'git add'
       alias gc 'git commit'
       alias gp 'git push'
       alias grt 'cd `git rev-parse --show-toplevel || echo .`'
    #+END_SRC
**** proxy alias
     #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/alias/misc.csh") :eval never :exports code :comments link
       alias pe 'setenv http_proxy http://127.0.0.1:8080; setenv https_proxy http://127.0.0.1:8080'
    #+END_SRC

*** Keybindings related config
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/keybinding.csh") :eval never :exports code :comments link
      if ( "$shell" =~ *tcsh ) then
          # csh does not know bindkey
          bindkey      i-search-back
          bindkey      i-search-fwd
          bindkey      backward-delete-word
          bindkey      backward-kill-line
          bindkey ^[[3~  delete-char
          bindkey [1~  beginning-of-line
          bindkey [4~  end-of-line
          bindkey -k up history-search-backward
          bindkey -k down history-search-forward
          bindkey "^[j" history-search-backward
          bindkey "^[k" history-search-forward
          bindkey "^r" i-search-back
          bindkey "^[h" backward-word
          bindkey "^[l" forward-word
          bindkey "\e[1~" beginning-of-line  # Home
          bindkey "\e[7~" beginning-of-line  # Home rxvt
          bindkey "\e[2~" overwrite-mode     # Ins
          bindkey "\e[3~" delete-char        # Delete
          bindkey "\e[4~" end-of-line        # End
          bindkey "\e[8~" end-of-line        # End rxvt
      endif
    #+END_SRC

*** User Interface related config
    
**** Status bar
     #+NAME: statusbarrc
     #+BEGIN_SRC sh :var statusbarrc_path=(m/resolve "${m/xdg.conf.d}/csh/init/statusbar.csh") :results output
       echo "set statusbarrc=\"$statusbarrc_path\""
     #+END_SRC
     #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/statusbar.csh") :eval never :exports code :comments link
       set txtred = "%{\e[0;30;31m%}"
       set txtgrn = "%{\e[0;30;32m%}"
       set txtylw = "%{\e[0;30;33m%}"
       set txtblu = "%{\e[0;30;34m%}"
       set txtpur = "%{\e[0;30;35m%}"
       set txtcyn = "%{\e[0;30;36m%}"
       set txtwht = "%{\e[0;30;37m%}"
       set txtrst = "%{\e[0m%}"
       set who    = "${txtred}`whoami`${txtrst}"
       set host   = "${txtylw}%M${txtrst}"
       set apwd   = "${txtgrn}%C${txtrst}"
       set datetime = "${txtpur}%P %Y/%W/%D${txtrst}"
       set at     = "${txtwht}@${txtrst}"
       #set gitrev = `sh -c 'git rev-parse --abbrev-ref HEAD 2> /dev/null'`
       set gitrev = `git branch |& grep '*' |& sed 's/^\* *//g'`
       #set sh_in_use = `ps | grep --color=none $$ | awk '{print $(NF)}'`
       set sh_in_use = "${txtblu}(`echo $0 | sed 's/-//'`)${txtrst}"
       set promptchars = ">#"
       if ( "${gitrev}" != "" ) then
           set gitprompt = "${txtcyn}${gitrev}${txtrst}"
           set prompt = "${apwd} ($gitprompt) %L%# "
       else
           set prompt = "${apwd} %L%# "
       endif
       #alias precmd "source `lsof +p $$ |& grep -oE /.\*statusbar.csh` >& /dev/null"
     #+END_SRC
     
**** Color related
     #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/uicolor.csh") :eval never :exports code :comments link
       # Enable color display for the built-in ls-F and it passes --color=auto to ls.
       set color

       # Display colorful NLS messages.
       set colorcat
       setenv TERM xterm-256color

       set noglob
       set base_colors = 'no=00:fi=00:di=01;34:or=05:41:ln=01;36:pi=40;33:so=40;33:bd=40;33:cd=40;33:ex=01;32'
       # Executable scripts
       set lsexts = (js lua php pl py rb sh)
       set lscolor = '00;32'
       foreach lsext (${lsexts})
           set base_colors = "${base_colors}:*.${lsext}=${lscolor}"
       end

       # Source files
       set lsexts = (c cc cpp h hh java js lua php pl pm rb sh)
       set lscolor = '00;33'
       foreach lsext (${lsexts})
           set base_colors = "${base_colors}:*.${lsext}=${lscolor}"
       end

       # Archive files
       set lsexts = (arj bz2 class deb gz pkg rar rpm tar tgz xz z zip Z)
       set lscolor = '00;31'
       foreach lsext (${lsexts})
           set base_colors = "${base_colors}:*.${lsext}=${lscolor}"
       end

       # Audio files
       set lsexts = (mp3 mp4a ogg wav)
       set lscolor = '00;33'
       foreach lsext (${lsexts})
           set base_colors = "${base_colors}:*.${lsext}=${lscolor}"
       end

       # Image files
       set lsexts = (bmp gif jpeg jpg pic png xbm xcf xpm xwd)
       set lscolor = '00;35'
       foreach lsext (${lsexts})
           set base_colors = "${base_colors}:*.${lsext}=${lscolor}"
       end

       # Video files
       set lsexts = (avi flac mpeg mpg)
       set lscolor = '00;36'
       foreach lsext (${lsexts})
           set base_colors = "${base_colors}:*.${lsext}=${lscolor}"
       end

       # Doc files
       set lsexts = (abw doc gnumeric htm html pdf ps rtf tex txt xls org)
       set lscolor = '01;37'
       foreach lsext (${lsexts})
           set base_colors = "${base_colors}:*.${lsext}=${lscolor}"
       end

       setenv LS_COLORS "${base_colors}"

       setenv LSCOLORS 'exfxcxdxbxegedabagacad'
       unset base_colors
       unset lsexts
       unset lscolor
       set color = (ls-F)
     #+END_SRC

*** History related config
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/history.csh") :eval never :exports code :comments link
      set histdup='prev'

      set history=1000000
      set savehist=($history merge)
      if ( "$shell" =~ *tcsh ) then
          set histfile = ${XDG_DATA_HOME}/csh/history
          # Save history (to above file)
          history -S
      endif
    #+END_SRC

*** Misc config
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/init/misc.csh") :eval never :exports code :comments link
      # Do not ignore EOF (^D).
      unset ignoreeof

      # Insure that files are not accidentally destroyed.
      set noclobber
    #+END_SRC

*** PATH related config
**** home local related config 
     #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/post/local.csh") :eval never :exports code :comments link
       if ( -d "$HOME/.local" ) then
            set path = ( "$HOME/.local/bin" $path )
       endif
     #+END_SRC

**** /usr/local/bin related config
     #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/post/local.csh") :eval never :exports code :comments link
       if ( -d "/usr/local/bin" ) then
            set path = ( "/usr/local/bin" $path )
       endif
     #+END_SRC

*** autojump releated config
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/post/autojump.csh") :eval never :exports code :comments link
      # set user installation paths
      if (-d ~/.autojump/bin) then
          set path = (~/.autojump/bin path)
      endif

      # prepend autojump to cwdcmd (run after every change of working directory)
      if (`alias cwdcmd` !~ *autojump*) then
          alias cwdcmd 'autojump --add $cwd >/dev/null;' `alias cwdcmd`
      endif

      #default autojump command
      alias j 'cd `autojump -- \!:1`'
    #+END_SRC

*** direnv related config
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/post/direnv.csh") :eval never :exports code  :noweb tangle 
      if (`command -v direnv` != "") then
          <<statusbarrc()>>
          alias precmd 'eval `direnv export tcsh`; source "$statusbarrc" >& /dev/null' # what is this command do in tcsh
      endif
    #+END_SRC

*** xdg workaround
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/csh/post/xdg.csh") :eval never :exports code :comments link
      #!/bin/csh
      if ( -s "${XDG_CONFIG_HOME}/ssh/config" ) then
          set SSH_CONFIG="-F ${XDG_CONFIG_HOME}/ssh/config"
      endif

      if ( -s "${XDG_CONFIG_HOME}/ssh/id_rsa" ) then
          set SSH_ID="-i ${XDG_CONFIG_HOME}/ssh/id_rsa"
      else if ( -s "${XDG_CONFIG_HOME}/ssh/id_dsa" ) then
          set SSH_ID="-i ${XDG_CONFIG_HOME}/ssh/id_dsa"
      endif

      set SSH_KNOWN_HOSTS="-o UserKnownHostsFile=${XDG_CONFIG_HOME}/ssh/known_hosts"

      alias tmux 'tmux -f ${XDG_CONFIG_HOME}/tmux/tmux.conf'
      alias ssh "ssh ${SSH_CONFIG} ${SSH_ID} ${SSH_KNOWN_HOSTS}"

      alias scp "scp ${SSH_CONFIG} ${SSH_ID} ${SSH_KNOWN_HOSTS}"
      alias mbsync "mbsync -c ${XDG_CONFIG_HOME}/isync/config"
    #+END_SRC


