#+TITLE:  常见脚本工具
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: 常见脚本工具
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

*** macOS do not distrub config
**** on
     #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/home.d}/.local/bin/dnd_on")) "no") :tangle-mode (identity #o755) :noweb yes :comments link
       #!/usr/bin/env zsh

       STATUS=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
	   | xmllint --xpath "string(//data)" - \
	   | base64 --decode \
	   | plutil -convert xml1 - -o - \
	   | xmllint --xpath 'boolean(//key[text()="userPref"]/following-sibling::dict/key[text()="enabled"])' -)

       if [[ $STATUS == "true" ]]; then
	   exit 0;
       fi 

       DND_HEX_DATA=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
			  | xmllint --xpath "string(//data)" - \
			  | base64 --decode \
			  | plutil -convert xml1 - -o - \
			  | plutil -insert userPref -xml "
	 <dict>
	     <key>date</key>
	     <date>$(date -u +"%Y-%m-%dT%H:%M:%SZ")</date>
	     <key>enabled</key>
	     <true/>
	     <key>reason</key>
	     <integer>1</integer>
	 </dict> " - -o - \
			  | plutil -convert binary1 - -o - \
			  | xxd -p \
			  | tr -d '\n')
       defaults write com.apple.ncprefs.plist dnd_prefs -data "$DND_HEX_DATA"
       declare -a PROCESSES=(
	   #cfprefsd
	   usernoted
	   #NotificationCenter
       )

       for process in "${PROCESSES[@]}"
       do
	   if [[ -n "${process}" ]]; then
	       pkill -9 "${process}"
	   fi
	   while [[ -z $(pgrep "${process}") ]]; do
	       sleep 0.1
	   done
       done
     #+END_SRC
**** off
     #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/home.d}/.local/bin/dnd_off")) "no") :tangle-mode (identity #o755) :noweb yes :comments link
       #!/usr/bin/env zsh

       # https://github.com/sindresorhus/do-not-disturb/issues/9#issuecomment-768492417
       STATUS=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
	   | xmllint --xpath "string(//data)" - \
	   | base64 --decode \
	   | plutil -convert xml1 - -o - \
	   | xmllint --xpath 'boolean(//key[text()="userPref"]/following-sibling::dict/key[text()="enabled"])' -)

       if [[ $STATUS == "false" ]]; then
	   exit 0;
       fi

       DND_HEX_DATA=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
			  | xmllint --xpath "string(//data)" - \
			  | base64 --decode \
			  | plutil -convert xml1 - -o - \
			  | plutil -remove userPref - -o - \
			  | plutil -convert binary1 - -o - \
			  | xxd -p \
			  | tr -d '\n')
       defaults write com.apple.ncprefs.plist dnd_prefs -data "$DND_HEX_DATA"
       declare -a PROCESSES=(
	   #cfprefsd
	   usernoted
	   #NotificationCenter
       )

       for process in "${PROCESSES[@]}"
       do
	   if [[ -n "${process}" ]]; then
	       pkill -9 "${process}"
	   fi
	   while [[ -z $(pgrep "${process}") ]]; do
	       sleep 0.1
	   done
       done
     #+END_SRC
*** respell of words
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/respell")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      query=$1
      
      html=$(curl -qsjklL "https://www.dictionary.com/browse/${query}")
      emphasize=`echo $html | pup ".serp-nav-button + div .pron-spell-ipa-container .pron-spell-content .bold text{}" |head -n 1`
      pronunciation=`echo $html | pup '.serp-nav-button + div .pron-spell-ipa-container .pron-spell-content text{}' | tr -d '[][:space:]' | awk -F, '{print $1}'`
      result=$(echo $pronunciation | awk -v em="$emphasize" '{gsub(em, toupper(em)); print $0;}')
      
      echo ${result}
    #+END_SRC

*** upload to ftp
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/fupload")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      if [ -z "${FTP_USER}" -o -z "${FTP_PASSWD}" -o -z "${FTP_ADDR}" -o -z "${FTP_ROOT}" ]; then
          echo "make sure the env FTP_USER, FTP_PASSWD, FTP_ADDR, FTP_ROOT exists"
          exit 1
      fi
      for file in "$@"; do
          curl --ftp-create-dirs -T $file -u "${FTP_USER}:${FTP_PASSWD}" ftp://${FTP_ADDR}/${FTP_ROOT}/
      done
    #+END_SRC

*** merge video audio subtitle into mp4
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/vmerge")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      FILEPATH=$(realpath $(dirname $0))
      echo "fullcmd: $0 $@"
      export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
      PROJECT_PATH=$(realpath "${FILEPATH}/..")
      GETOPT_ARGS=`getopt -o:s:dh -l debug,help, -- "$@"`
      eval set -- "$GETOPT_ARGS"

      usage() {
          >&2 echo "Usage: $0 -h|--help -d|--debug /path/to/dir /path/to/output"
      }

      while [ -n "$1" ]
      do
          case "$1" in
              -d|--debug)
                  set -x;
                  debug=1;
                  shift;
                  ;;
              -h|--help)
                  usage;
                  exit 0;
                  ;;
              --)
                  shift;
                  break;
                  ;;
          esac
      done

      if [ "$#" -ne 2 ]; then
          >&2 echo "Please specify the /path/to/input /path/to/output"
          usage
          exit 1
      fi
      input_dir=$(realpath -e $1)
      output_dir=$(realpath $2)

      if [ ${input_dir} = ${output_dir} ]; then
          >&2 echo "input_dir: ${input_dir} same as output_dir: ${output_dir}"
          exit 1;
      fi


      if ! [ -d "${input_dir}" ]; then
          >&2 echo "${input_dir} not exists"
          exit 1;
      fi

      if [ -z "${output_dir}" ]; then
          >&2 echo "output_dir can not be empty"
          exit 1
      fi

      if ! [ -d "${output_dir}" ]; then
          >&2 echo "${output_dir} as output_dir not exists, create a new one"
          mkdir -p ${output_dir}
      fi

      script=$(mktemp)

      pushd ${input_dir} > /dev/null
      ls \
          | sed -E 's/\.(mp4|m4a|ass)$//' \
          | sort \
          | uniq -c -d \
          | sed -E 's/^\s*//;s/([0-9]+) (.*)/\1|\2/' \
          | awk -F'|' -v output_dir=${output_dir} '
                $1==3 {
                    valid=system(sprintf("test -s \"%s.ass\"", $2));
                    if(valid == 0) {
                        printf "ffmpeg -y -loglevel error -i \"%s.mp4\" -i \"%s.m4a\" -i \"%s.ass\" -c:v copy -c:a copy -c:s mov_text -map 0:v -map 1:a -map 2:s -metadata:s:s:0 language=eng -disposition:s:0 default \"%s/%s.mp4\"\n", $2, $2, $2, output_dir, $2
                    } else {
                        printf "ffmpeg -y -loglevel error -i \"%s.mp4\" -i \"%s.m4a\" -c:v copy -c:a copy -map 0:v -map 1:a \"%s/%s.mp4\"\n", $2, $2, output_dir, $2
                    }
                }' > ${script}
      bash -x ${script}
      popd
    #+END_SRC

*** GreenVPN v2ray
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/gv2ray")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      FILEPATH=$(realpath $(dirname $0))
      PROJECT_PATH=$(realpath "${FILEPATH}/..")
      set -eo pipefail
      export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
      GETOPT_ARGS=`getopt -o:s:dh -l debug,help, -- "$@"`
      eval set -- "$GETOPT_ARGS"

      usage() {
          >&2 echo "Usage: $0 -h|--help -d|--debug server_name"
      }

      while [ -n "$1" ]
      do
          case "$1" in
              -d|--debug)
                  set -x;
                  debug=1;
                  shift;
                  ;;
              -h|--help)
                  usage;
                  exit 0;
                  ;;
              --)
                  shift;
                  break;
                  ;;
          esac
      done

      # get session id
      if [ -z "${GREEN_USER}" -o -z "${GREEN_PASSWORD}" ]; then
          echo "make sure the env GREEN_USER, GREEN_PASSWORD exists"
          exit 1
      fi


      if [ "$#" -ne 1 ]; then
          >&2 echo "Please specify the server name to connect"
          usage
          exit 1
      fi

      server_name=$1
      device_id="$(route -n get default|awk -F':' '/interface/{print $2}'|xargs ifconfig|awk '/ether/{print $2}'|sed 's/://g'|md5sum|cut -c1-32|tr -d '\n')"
      local_ip="$(route -n get default|awk -F':' '/interface/{print $2}'|xargs ifconfig|awk '/inet /{print $2}' | tr -d '\n')"
      public_ip="$(curl -s ifconfig.me)"

      session=$(curl -s -X POST \
                     -d 'domain=GreenVPN' \
                     -d 'version=4.0' \
                     -d 'deviceId='"$device_id" \
                     -d 'account='"$GREEN_USER" \
                     -d 'password='"$GREEN_PASSWORD" \
                     -d 'terminal=Unkonwn' \
                     -d 'language=en' \
                     -d 'account='"$GREEN_USER" \
                     -d 'platform=10' \
                     https://www.wzjsq.xyz/Win/1.0/UserLogin \
                    | sed 's/ //g' \
                    | base64 -d \
                    | openssl enc -d -des-ede3-ecb -K $(echo -n a0soxa1gtryc9kjf8gdxaeyf|xxd -p) \
                    | yq -p xml '.root.+@session')

      # get server id
      remote_id=$(curl -s -X POST \
                       -d 'domain=GreenVPN' \
                       -d 'version=4.0' \
                       -d 'deviceId='"$device_id" \
                       -d 'terminal=Unkonwn' \
                       -d 'language=en' \
                       -d 'account='"$GREEN_USER" \
                       -d 'platform=10' \
                       https://www.wzjsq.xyz/Win/1.0/ServerList \
                      | sed 's/ //g' \
                      | base64 -d \
                      | openssl enc -d -des-ede3-ecb -K $(echo -n a0soxa1gtryc9kjf8gdxaeyf|xxd -p) \
                      | yq -p xml '.root.list.server[].node |= ([] + . )|[.root.list.server[].node[]]|[.[]|{"name":.+@name, "id":.+@id, "ip":.+@ip}]|unique_by(.name)|.[]|select(.name == '"\"$server_name\""')|.id')

      # make v2ray config
      v2ray_json=$(mktemp)
      curl -s -X POST \
           -d 'domain=GreenVPN' \
           -d 'version=4.0' \
           -d 'deviceId='"$device_id" \
           -d 'platform=10' \
           -d 'protocol=8' \
           -d 'terminal=Unkonwn' \
           -d 'language=en' \
           -d 'account='"$GREEN_USER" \
           -d 'password='"$GREEN_PASSWORD" \
           -d 'session='"$session" \
           -d 'isoCode=CN' \
           -d 'clientIp='"$public_ip" \
           -d 'remoteId='"$remote_id" \
           -d 'obscure=0' \
           https://www.wzjsq.xyz/Win/1.0/MakeV2ray \
          | sed 's/ //g' \
          | base64 -d \
          | openssl enc -d -des-ede3-ecb -K $(echo -n a0soxa1gtryc9kjf8gdxaeyf|xxd -p) \
          | yq -p xml '.root.+content|sub(" ", "")|@base64d|from_json' \
          | jq > $v2ray_json
      vconfig=$(mktemp)
      cat $v2ray_json | yq -p json '.outbound.settings.vnext[0]|{"server": {"address":.address, "port":.port}, "credentials": {"id": .users[0].id, "email": .users[0].email, "flow": .users[0].flow, "encryption": .users[0].encryption}}' > $vconfig

      yq -p yaml -o yaml '(.outbounds.[]|select(.type=="vless")).server = load("'"$vconfig"'").server|(.outbounds.[]|select(.type=="vless")).credentials = load("'"$vconfig"'").credentials' config.yaml | erb -T - -r ${FILEPATH}/vars.rb ${FILEPATH}/config.json.erb | jq
    #+END_SRC

    #+BEGIN_SRC ruby :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/vars.rb")) "no") :noweb yes
      require 'yaml'
      data = STDIN.read
      $config = YAML.load(data)
      def config()
        return $config
      end
    #+END_SRC
    #+BEGIN_SRC ruby :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/config.json.erb")) "no") :noweb yes
      {
        "log": {
          "loglevel": "info"
        },
        "dns": {
          "hosts": {
            "geosite:category-ads-all": "127.0.0.1"
          },
          "servers": [
            {
              "address": "8.8.8.8",
              "port": 53,
              "domains": [
                "geosite:geolocation-!cn"
              ]
            },
            {
              "address": "223.5.5.5",
              "port": 53,
              "domains": [
                "geosite:cn"
              ]
            },
            "localhost"
          ]
        },
        "inbounds": [
          {
            "port": 53,
            "tag": "dns-in",
            "protocol": "dokodemo-door",
            "settings": {
              "address": "8.8.8.8",
              "port": 53,
              "network": "tcp,udp"
            }
          },
          {
            "port": 10240,
            "tag": "vclient_http",
            "protocol": "http",
            "sniffing": {
              "enabled": true
            }
          },
          {
            "port": 10241,
            "protocol": "socks",
            "tag": "vclient_socks",
            "settings": {
              "udp": true
            }
          },
          {
            "port": 10242,
            "tag": "ssclient_socks",
            "protocol": "socks",
            "settings": {
              "auth": "noauth"
            },
            "sniffing": {
              "enabled": true,
              "destOverride": ["http", "tls"]
            }
          }
        ],
        "outbounds": [
      <%- config['outbounds'].each do |outbound| -%>
         {
            "tag": "<%=outbound['tag']%>",
            "protocol": "<%=outbound['type']%>",
            "settings": {
              <%- if "shadowsocks" == outbound['type'] -%>
              "servers": [
                {
                  "address": "<%=outbound['server']['address']%>",
                  "method": "<%=outbound['credentials']['method']%>",
                  "password": "<%=outbound['credentials']['password']%>",
                  "port": <%=outbound['server']['port']%>
                }
              ]<% end -%>
              <%- if "vless" == outbound['type'] -%>
              "vnext": [
                {
                  "address": "<%=outbound['server']['address']%>",
                  "port": <%=outbound['server']['port']%>,
                  "users": [
                    {
                      "id": "<%=outbound['credentials']['id']%>",
                      "email": "<%=outbound['credentials']['email']%>",
                      "flow": "<%=outbound['credentials']['flow']%>",
                      "encryption": "<%=outbound['credentials']['encryption']%>"
                    }
                  ]
                }
              ]<% end %> <%# end of vless %>
            } <%- if "vless" == outbound['type'] -%>,
             "streamSettings": {
              "network": "tcp",
              "security": "xtls",
              "xtlsSettings": {
                  "allowInsecure": true
              }
            }<% end %>
         },
      <%- end -%>
          {
            "tag": "direct",
            "protocol": "freedom"
          },
          {
            "protocol": "blackhole",
            "tag": "blocked"
          },
          {
            "tag": "dns-out",
            "protocol": "dns",
            "settings": {
              "network": "udp",
              "address": "8.8.8.8",
              "port": 53
            }
          }
        ],
        "routing": {
          "domainStrategy": "IPIfNonMatch",
          "rules": [
            {
              "type": "field",
              "domain": [
                "geosite:category-ads-all"
              ],
              "outboundTag": "blocked"
            },
            {
              "type": "field",
              "protocol": [
                "bittorrent"
              ],
              "outboundTag": "direct"
            },
            {
              "type": "field",
              "domain": [
                "geosite:speedtest",
                "geosite:cn",
                "akamai.com",
                "charter.com",
                "dslr.net",
                "dslreports.com",
                "fast.com",
                "fastly.com",
                "fdcservers.net",
                "i3d.net",
                "nflxvideo.net",
                "ooklaserver.net",
                "spectrum.com",
                "speedtest.net",
                "speedtestcustom.com"
              ],
              "outboundTag": "direct"
            },
            {
              "type": "field",
              "ip": [
                "8.8.8.8"
              ],
              "outboundTag": "vserver"
            },
            {
              "type": "field",
              "domain": [
                "geosite:cn"
              ],
              "outboundTag": "direct"
            },
            {
              "type": "field",
              "ip": [
                "223.5.5.5"
              ],
              "outboundTag": "direct"
            },
            {
              "type": "field",
              "outboundTag": "direct",
              "ip": [
                "geoip:cn",
                "geoip:private"
              ]
            },
            {
              "type": "field",
              "inboundTag": ["dns-in"],
              "outboundTag": "dns-out"
            },
            {
              "type": "field",
              "inboundTag": ["ssclient_socks"],
              "outboundTag": "ssserver"
            },
            {
              "type": "field",
              "inboundTag": ["vclient_socks"],
              "outboundTag": "vserver"
            },
            {
              "type": "field",
              "inboundTag": ["vclient_http"],
              "outboundTag": "vserver"
            }
          ]
        },
        "policy": {
          "system": {
            "statsInboundUplink": true,
            "statsInboundDownlink": true
          }
        }
      }
    #+END_SRC
    

*** macos wifi crack
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/home.d}/.local/bin/wcrack")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      FILEPATH=$(realpath $(dirname $0))
      PROJECT_PATH=$(realpath "${FILEPATH}/..")
      set -eo pipefail
      export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
      GETOPT_ARGS=`getopt -o:s:dh -l debug,help, -- "$@"`
      eval set -- "$GETOPT_ARGS"

      usage() {
          >&2 echo "Usage: $0 -h|--help -d|--debug <bssid> <channel> <interface> <outfile>"
          >&2 echo "    To get <bssid>     : sudo airport -s"
          >&2 echo "    To get <channel>   : sudo airport -s"
          >&2 echo "    To get <interface> : route -n get default|awk -F':' '/interface/{print $2}'"
      }

      while [ -n "$1" ]
      do
          case "$1" in
              -d|--debug)
                  set -x;
                  debug=1;
                  shift;
                  ;;
              -h|--help)
                  usage;
                  exit 0;
                  ;;
              --)
                  shift;
                  break;
                  ;;
          esac
      done

      if [ "$#" -ne 4 ]; then
          usage
          exit 1
      fi

      BSSID=$1
      CHANNEL=$2
      INTERFACE=$3
      OUTFILE=$4

      # disassociate
      sudo airport -z
      # set the channel
      # DO NOT PUT SPACE BETWEEN -c and the channel
      # for example sudo airport -c6
      sudo airport -c$CHANNEL
      # capture a beacon frame from the AP

      # type mgt subtype beacon == IEEE  802.11  frame  type  matches  the  specified wlan_type.  
      # syntax: type wlan_type subtype wlan_subtype
      #    True  if  the  IEEE  802.11  frame  type  matches  the specified
      #    wlan_type and frame subtype matches the specified wlan_subtype.

      #    Valid wlan_types are: mgt, ctl and data.
      #    
      #    If the specified wlan_type is mgt, then valid wlan_subtypes are:
      #    assoc-req,  assoc-resp,  reassoc-req,  reassoc-resp,  probe-req,
      #    probe-resp, beacon, atim, disassoc, auth and deauth.
      #    
      #    If the specified wlan_type is ctl, then valid wlan_subtypes are:
      #    bar, ba, ps-poll, rts, cts, ack, cf-end and cf-end-ack.
      #    
      #    If  the  specified  wlan_type  is data, then valid wlan_subtypes
      #    are: data, data-cf-ack,  data-cf-poll,  data-cf-ack-poll,  null,
      #    cf-ack,   cf-poll,   cf-ack-poll,   qos-data,   qos-data-cf-ack,
      #    qos-data-cf-poll,  qos-data-cf-ack-poll,  qos,  qos-cf-poll  and
      #    qos-cf-ack-poll.
      # -c <count>              == exit after receiving count packages
      # -I                      == monitor mode
      # see https://www.tcpdump.org/manpages/pcap-filter.7.txt for packet filter syntax
      captured_beacon=$(mktemp /tmp/XXXXXX.cap)
      sudo tcpdump "type mgt subtype beacon and ether src $BSSID" -I -c 1 -i ${INTERFACE} -w ${captured_beacon}

      # wait for the WPA handshake
      # -I                 == monitor mode
      # -U                 == packet buffered
      # -vvv               == Event more verbose output
      # -i <interface>     == interface
      # -w <outfile>       == write the raw packets to file rather print it to stdout
      # ether proto 0x888e == EAP over LAN (Extensible Authentication Protocol over Local Area Network) == EAPoL
      # ether proto see https://en.wikipedia.org/wiki/EtherType
      # ether host $BSSID  == ether src host $BSSID or ether dst host $BSSID
      # see https://www.ibm.com/docs/en/qsip/7.4?topic=queries-berkeley-packet-filters
      # see https://www.tcpdump.org/manpages/pcap-filter.7.txt for packet filter syntax
      captured_handshake=$(mktemp /tmp/XXXXXX.cap)
      sudo tcpdump "ether proto 0x888e and ether host $BSSID" -I -U -vvv -c 8 -i ${INTERFACE} -w ${captured_handshake}
      sudo airport -z

      # merge beacon.cap handshake.cap to capture.cap
      # -a               == cause the frame timestamps to be ignored, write all packets from first input file followed by all the packets from the second input file
      # -F <file format> == Set the file format of the output capture file
      # -w <outfile>|-   == set the output filename or -(stdout)
      mkdir -p $(dirname $(realpath ${OUTFILE})) || (echo "can not mkdir for outfile" && exit 1)
      mergecap -a -F pcap -w ${OUTFILE} ${captured_beacon} ${captured_handshake}

      >&2 echo "Crack with following command"
      >&2 echo "    aircrack-ng $(realpath ${OUTFILE}) -b ${BSSID} -e ${INTERFACE} -w </path/to/your/dict>"


    #+END_SRC
