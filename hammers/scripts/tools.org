#+TITLE:  常见脚本工具
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: 常见脚本工具
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

*** macOS do not distrub config
**** on
     #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/home.d}/.local/bin/dnd_on")) "no") :tangle-mode (identity #o755) :noweb yes :comments link
       #!/usr/bin/env zsh

       STATUS=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
	   | xmllint --xpath "string(//data)" - \
	   | base64 --decode \
	   | plutil -convert xml1 - -o - \
	   | xmllint --xpath 'boolean(//key[text()="userPref"]/following-sibling::dict/key[text()="enabled"])' -)

       if [[ $STATUS == "true" ]]; then
	   exit 0;
       fi 

       DND_HEX_DATA=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
			  | xmllint --xpath "string(//data)" - \
			  | base64 --decode \
			  | plutil -convert xml1 - -o - \
			  | plutil -insert userPref -xml "
	 <dict>
	     <key>date</key>
	     <date>$(date -u +"%Y-%m-%dT%H:%M:%SZ")</date>
	     <key>enabled</key>
	     <true/>
	     <key>reason</key>
	     <integer>1</integer>
	 </dict> " - -o - \
			  | plutil -convert binary1 - -o - \
			  | xxd -p \
			  | tr -d '\n')
       defaults write com.apple.ncprefs.plist dnd_prefs -data "$DND_HEX_DATA"
       declare -a PROCESSES=(
	   #cfprefsd
	   usernoted
	   #NotificationCenter
       )

       for process in "${PROCESSES[@]}"
       do
	   if [[ -n "${process}" ]]; then
	       pkill -9 "${process}"
	   fi
	   while [[ -z $(pgrep "${process}") ]]; do
	       sleep 0.1
	   done
       done
     #+END_SRC
**** off
     #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/home.d}/.local/bin/dnd_off")) "no") :tangle-mode (identity #o755) :noweb yes :comments link
       #!/usr/bin/env zsh

       # https://github.com/sindresorhus/do-not-disturb/issues/9#issuecomment-768492417
       STATUS=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
	   | xmllint --xpath "string(//data)" - \
	   | base64 --decode \
	   | plutil -convert xml1 - -o - \
	   | xmllint --xpath 'boolean(//key[text()="userPref"]/following-sibling::dict/key[text()="enabled"])' -)

       if [[ $STATUS == "false" ]]; then
	   exit 0;
       fi

       DND_HEX_DATA=$(plutil -extract dnd_prefs xml1 -o - /Users/${USER}/Library/Preferences/com.apple.ncprefs.plist \
			  | xmllint --xpath "string(//data)" - \
			  | base64 --decode \
			  | plutil -convert xml1 - -o - \
			  | plutil -remove userPref - -o - \
			  | plutil -convert binary1 - -o - \
			  | xxd -p \
			  | tr -d '\n')
       defaults write com.apple.ncprefs.plist dnd_prefs -data "$DND_HEX_DATA"
       declare -a PROCESSES=(
	   #cfprefsd
	   usernoted
	   #NotificationCenter
       )

       for process in "${PROCESSES[@]}"
       do
	   if [[ -n "${process}" ]]; then
	       pkill -9 "${process}"
	   fi
	   while [[ -z $(pgrep "${process}") ]]; do
	       sleep 0.1
	   done
       done
     #+END_SRC
*** respell of words
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/respell")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      query=$1
      
      html=$(curl -qsjklL "https://www.dictionary.com/browse/${query}")
      emphasize=`echo $html | pup ".serp-nav-button + div .pron-spell-ipa-container .pron-spell-content .bold text{}" |head -n 1`
      pronunciation=`echo $html | pup '.serp-nav-button + div .pron-spell-ipa-container .pron-spell-content text{}' | tr -d '[][:space:]' | awk -F, '{print $1}'`
      result=$(echo $pronunciation | awk -v em="$emphasize" '{gsub(em, toupper(em)); print $0;}')
      
      echo ${result}
    #+END_SRC

*** upload to ftp
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/fupload")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      if [ -z "${FTP_USER}" -o -z "${FTP_PASSWD}" -o -z "${FTP_ADDR}" -o -z "${FTP_ROOT}" ]; then
          echo "make sure the env FTP_USER, FTP_PASSWD, FTP_ADDR, FTP_ROOT exists"
          exit 1
      fi
      for file in "$@"; do
          curl --ftp-create-dirs -T $file -u "${FTP_USER}:${FTP_PASSWD}" ftp://${FTP_ADDR}/${FTP_ROOT}/
      done
    #+END_SRC

*** merge video audio subtitle into mp4
    #+BEGIN_SRC shell :eval never :exports code :tangle (or (and (or (eq m/os 'macos) (eq m/os 'liunx)) (m/resolve "${m/home.d}/.local/bin/vmerge")) "no") :tangle-mode (identity #o755) :noweb yes
      #!/bin/bash
      FILEPATH=$(realpath $(dirname $0))
      echo "fullcmd: $0 $@"
      export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
      PROJECT_PATH=$(realpath "${FILEPATH}/..")
      GETOPT_ARGS=`getopt -o:s:dh -l debug,help, -- "$@"`
      eval set -- "$GETOPT_ARGS"

      usage() {
          >&2 echo "Usage: $0 -h|--help -d|--debug /path/to/dir /path/to/output"
      }

      while [ -n "$1" ]
      do
          case "$1" in
              -d|--debug)
                  set -x;
                  debug=1;
                  shift;
                  ;;
              -h|--help)
                  usage;
                  exit 0;
                  ;;
              --)
                  shift;
                  break;
                  ;;
          esac
      done

      if [ "$#" -ne 2 ]; then
          >&2 echo "Please specify the /path/to/input /path/to/output"
          usage
          exit 1
      fi
      input_dir=$(realpath -e $1)
      output_dir=$(realpath $2)

      if [ ${input_dir} = ${output_dir} ]; then
          >&2 echo "input_dir: ${input_dir} same as output_dir: ${output_dir}"
          exit 1;
      fi


      if ! [ -d "${input_dir}" ]; then
          >&2 echo "${input_dir} not exists"
          exit 1;
      fi

      if [ -z "${output_dir}" ]; then
          >&2 echo "output_dir can not be empty"
          exit 1
      fi

      if ! [ -d "${output_dir}" ]; then
          >&2 echo "${output_dir} as output_dir not exists, create a new one"
          mkdir -p ${output_dir}
      fi

      script=$(mktemp)

      pushd ${input_dir} > /dev/null
      ls \
          | sed -E 's/\.(mp4|m4a|ass)$//' \
          | sort \
          | uniq -c -d \
          | sed -E 's/^\s*//;s/([0-9]+) (.*)/\1|\2/' \
          | awk -F'|' -v output_dir=${output_dir} '
                $1==3 {
                    valid=system(sprintf("test -s \"%s.ass\"", $2));
                    if(valid == 0) {
                        printf "ffmpeg -y -loglevel error -i \"%s.mp4\" -i \"%s.m4a\" -i \"%s.ass\" -c:v copy -c:a copy -c:s mov_text -map 0:v -map 1:a -map 2:s -metadata:s:s:0 language=eng -disposition:s:0 default \"%s/%s.mp4\"\n", $2, $2, $2, output_dir, $2
                    } else {
                        printf "ffmpeg -y -loglevel error -i \"%s.mp4\" -i \"%s.m4a\" -c:v copy -c:a copy -map 0:v -map 1:a \"%s/%s.mp4\"\n", $2, $2, output_dir, $2
                    }
                }' > ${script}
      bash -x ${script}
      popd
    #+END_SRC
