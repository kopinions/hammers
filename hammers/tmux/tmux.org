#+TITLE:  tmux 相关配置
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: tmux 相关配置文件
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

*** tmux 辅助方法
    #+BEGIN_SRC sh :tangle (m/resolve "${m/xdg.conf.d}/tmux/helpers.sh") :results silent :tangle-mode (identity #o755) :shebang #!/bin/bash :noweb yes :comments link
      command_exists() {
          local command="$1"
          type "$command" >/dev/null 2>&1
      }

      ccopy() {
          # installing reattach-to-user-namespace is recommended on OS X
          if command_exists "pbcopy"; then
              if command_exists "reattach-to-user-namespace"; then
                  echo "reattach-to-user-namespace pbcopy"
              else
                  echo "pbcopy"
              fi
          elif command_exists "clip.exe"; then # WSL clipboard command
              echo "cat | clip.exe"
          elif command_exists "wl-copy"; then # wl-clipboard: Wayland clipboard utilities
              echo "wl-copy"
          elif command_exists "xsel"; then
              echo "xsel -i --clipboard"
          elif command_exists "xclip"; then
              echo "xclip -selection clipboard"
          elif command_exists "putclip"; then # cygwin clipboard command
              echo "putclip"
          elif
              echo ""
      }

      cpaste() {
          # installing reattach-to-user-namespace is recommended on OS X
          if command_exists "pbpaste"; then
              if command_exists "reattach-to-user-namespace"; then
                  echo "reattach-to-user-namespace pbpaste"
              else
                  echo "pbpaste"
              fi
          elif command_exists "clip.exe"; then # WSL clipboard command
              echo "cat | clip.exe"
          elif command_exists "wl-paste"; then # wl-clipboard: Wayland clipboard utilities
              echo "wl-paste"
          elif command_exists "xsel"; then
              echo "xsel -o --clipboard"
          elif command_exists "xclip"; then
              echo "xclip -o -selection clipboard"
          elif command_exists "putclip"; then # cygwin clipboard command
              echo "putclip"
          elif
              echo ""
      }
    #+END_SRC
*** tmux 配置
    #+NAME: helper
    #+BEGIN_SRC elisp :var helper=(m/resolve "${m/xdg.conf.d}/tmux/helpers.sh")
      helper
    #+END_SRC
    #+BEGIN_SRC conf :tangle (m/resolve "${m/xdg.conf.d}/tmux/tmux.conf") :results silent :comments link :noweb yes
      # use ctrl-a to as prefix
      set -g prefix C-x
      unbind-key C-b

      # emacs 类似快捷键
      set -gw mode-keys emacs

      # set color of active pane
      set -g status-keys emacs
      set -g status on
      # default hide the pane border status
      set -g pane-border-status top
      set -g base-index 1
      setw -g pane-base-index 1
      set -g renumber-windows on

      set -g history-limit 102400

      # enable mouse to scoll history
      set -g mouse on
      bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
      bind -n WheelDownPane select-pane -t= \; send-keys -M
      set-environment -g TMUX_PLUGIN_MANAGER_PATH "${XDG_CONFIG_HOME}/tmux/plugins"
      set -g @plugin 'tmux-plugins/tpm'
      set -g @plugin 'tmux-plugins/tmux-sensible'
      set -g @plugin 'tmux-plugins/tmux-resurrect'
      set -g @plugin 'tmux-plugins/tmux-copycat'
      set -g @plugin 'tmux-plugins/tmux-open'
      set -g @plugin 'tmux-plugins/tmux-urlview'
      # copy to system clipboard in tmux
      set -g @plugin 'tmux-plugins/tmux-yank'
      set -g @plugin 'laktak/extrakto'
      run '${XDG_CONFIG_HOME}/tmux/tpm/tpm'

      # prefix, / to search
      set -g @copycat_search "/"
      set -g @yank_selection 'clipboard'
      # copy in copy-mode
      set -g @copy_mode_yank "M-w"
      # paste clipboard normal mode
      bind-key -T prefix C-y run-shell 'zsh -c "source <<helper()>>;eval \$(cpaste)" | tmux load-buffer - && tmux paste-buffer'
      # paste clipboard copy mode
      bind-key -T copy-mode C-y run-shell 'zsh -c "source <<helper()>>;eval \$(cpaste)" | tmux load-buffer - && tmux paste-buffer && tmux send-keys Escape'
      set -g @yank_with_mouse on
      set -g @yank_selection_mouse 'clipboard'

      set -g @extrakto_split_size "15"
      set -g @extrakto_split_direction "v"
      set -g @extrakto_copy_key "tab"      # use tab to copy to clipboard
      set -g @extrakto_insert_key "enter"  # use enter to insert selection

      bind-key -T prefix 1 resize-pane -Z
      bind-key -T prefix 2 split-window -v 
      bind-key -T prefix 3 split-window -h 
      bind-key -T prefix 0 kill-pane
      bind-key -T prefix o if-shell -F "#{e|>:#{window_panes},2}" "if -F '#{window_zoomed_flag}' 'resize-pane -Z;display-panes -d 0 \"select-pane -t %%\"' 'display-panes -d 0 \"select-pane -t %%\"'" 'select-pane -t=:.+1'  
      # move to the last used window
      bind a last-window
      bind | split-window -h
      bind - split-window -v
      unbind '"'
      unbind %
      bind T run 'zsh -c "arr=( off top ) && tmux setw pane-border-status \${arr[\$(( \${arr[(I)#{pane-border-status}]} % 2 + 1 ))]}"'
      # rename pane
      bind t command-prompt -p "(rename-pane)" -I "#T" "select-pane -T '%%'"
    #+END_SRC
*** tmuxinator misc config
    #+BEGIN_SRC yaml :tangle (m/resolve "${m/xdg.conf.d}/tmuxinator/misc.yml") :eval never :exports code :noweb yes
      name: misc
      root: ~

      # Optional tmux socket
      # socket_name: foo

      # Note that the pre and post options have been deprecated and will be replaced by
      # project hooks.

      # Project hooks

      # Runs on project start, always
      # on_project_start: command

      # Run on project start, the first time
      # on_project_first_start: command

      # Run on project start, after the first time
      # on_project_restart: command

      # Run on project exit ( detaching from tmux session )
      # on_project_exit: command

      # Run on project stop
      # on_project_stop: command

      # Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.
      # pre_window: rbenv shell 2.0.0-p247

      # Pass command line options to tmux. Useful for specifying a different tmux.conf.
      # tmux_options: -f ~/.tmux.mac.conf

      # Change the command to call tmux.  This can be used by derivatives/wrappers like byobu.
      # tmux_command: byobu

      # Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.
      startup_window: commands

      # Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.
      startup_pane: 1

      # Controls whether the tmux session should be attached to automatically. Defaults to true.
      # attach: false

      windows:
        - commands:
            layout: even-vertical
            # Synchronize all panes of this window, can be enabled before or after the pane commands run.
            # 'before' represents legacy functionality and will be deprecated in a future release, in favour of 'after'
            # synchronize: after
            panes:
              - misc:
                - tmux select-pane -t misc:1.1 -T "misc" && clear
        - workspace:
            root: ~/workspace
            panes:
              - tmux select-pane -t misc:2 -T "workspace" && clear
    #+END_SRC

# Local Variables:
# indent-tabs-mode: nil
# End:
