#+TITLE:  补全配置
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+PROPERTY:    header-args:elisp  :tangle "~/.emacs.d/lisp/init-completion.el"
#+PROPERTY:    header-args:shell  :tangle no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** company
   #+BEGIN_SRC elisp :eval never :exports code :comments link
     (use-package company
       :diminish company-mode
       :bind
       (:map company-active-map
	     ("C-n" . company-select-next)
	     ("C-p" . company-select-previous)
	     ("<tab>" . company-complete-common-or-cycle)
	     :map company-search-map
	     ("C-p" . company-select-previous)
	     ("C-n" . company-select-next))
       :custom
       (company-idle-delay 0)
       (company-echo-delay 0)
       (company-dabbrev-downcase nil)
       (company-minimum-prefix-length 1)
       :config
       (global-company-mode)
       (use-package company-posframe
	 :diminish company-posframe-mode
	 :hook
	 (company-mode . company-posframe-mode))
       (use-package company-flx
	 :diminish company-flx-mode
	 :requires company
	 :config
	 (company-flx-mode +1))
       (use-package company-box
	 :diminish company-box-mode
	 :hook (company-mode . company-box-mode)
	 :config
	 (setq company-box-backends-colors nil)
	 (setq company-box-show-single-candidate nil)
	 (setq company-box-max-candidates 50))
       (use-package company-quickhelp
	 :diminish company-quickhelp-mode
	 :defines company-quickhelp-delay
	 :bind
	 (:map company-active-map
	       ("M-h" . company-quickhelp-manual-begin))
	 :hook
	 (global-company-mode . company-quickhelp-mode)
	 :custom
	 (company-quickhelp-delay 0.8)))
   #+END_SRC

** yasnippet
   如果我们需要将在 company 补全的时候，同时使用 yasnippet, 这种时候需要将 yasnippet 的 backend 添加到 company-backends 变量中

   #+BEGIN_SRC elisp :eval never :exports code :comments link
     (use-package yasnippet
       :config
       (use-package yasnippet-snippets
	 :requires yasnippet
	 :after company
	 :preface
	 (defvar company-mode/enable-yas t
	   "Enable yasnippet for all backends.")
	 (defun company-mode/backend-with-yas (backend)
	   (if	(or (not company-mode/enable-yas)
			 (and (listp backend) (member 'company-yasnippet backend)))
	       backend
	     (append (if (consp backend) backend (list backend))
		     '(:with company-yasnippet))))

	 :custom (yas-snippet-dirs `(,(expand-file-name "snippets" m/conf.d) ,yasnippet-snippets-dir))
	 :config
	 (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
	 (yas-reload-all))
       (yas-global-mode t))
   #+END_SRC

** provide
   #+BEGIN_SRC elisp :eval never :exports code :comments link
     (provide 'init-completion)
   #+END_SRC
