#+TITLE:  mailbox 配置
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: mailbox 配置文件
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+PROPERTY:    header-args:elisp  :tangle (expand-file-name "lisp/init-email.el" m/conf.d)
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

*** notmuch 配置
    #+BEGIN_SRC elisp :eval never :exports code :comments link
      (defun sb/mbsync (&rest group)
	(interactive)
	(let ((group (or (and (car group) group) '("--all")))
	      (command `("mbsync" "--verbose" "--quiet" ,@group)))
	  (message "Starting %s.." (mapconcat 'identity command " "))
	  (apply 'start-process "mbsync" "*mbsync*" command)))

      (use-package notmuch
	:ensure-system-package (notmuch msmtp (mbsync . isync))
	:hook
	(notmuch-message-mode . turn-off-auto-fill)
	:bind (("C-x m" . sb/notmuch)
	       ("M-]" . notmuch-cycle-notmuch-buffers))
	:custom
	(notmuch-address-use-company nil)
	(notmuch-hello-thousands-separator ",")
	(notmuch-mua-cite-function (quote message-cite-original-without-signature))
	(notmuch-fcc-dirs "sent +sent -unread -inbox")
	(notmuch-saved-searches
	 (quote
	  ((:name "Inbox" :query "tag:inbox" :key "i")
	   (:name "Flagged" :query "tag:flagged" :key "f")
	   (:name "Drafts" :query "tag:draft" :key "d")
	   (:name "New in Threads" :query "thread:\"{from:stig}\" and tag:new and not tag:sent" :key "t" :sort-order newest-first :search-type tree)
	   (:name "All in Threads" :query "thread:\"{from:stig}\"" :key "T" :sort-order newest-first :search-type tree :count-query "tag:no-match")
	   (:name "List Messages" :query "tag:lists and tag:new and not tag:sent" :key "l" :search-type tree)
	   (:name "Recent-ish" :query "date:-4d..today and not tag:lists" :key "r" :count-query "tag:no-match" :sort-order newest-first))))
	(notmuch-tagging-keys
	 (quote
	  (("a" notmuch-archive-tags "Archive")
	   ("u" notmuch-show-mark-read-tags "Mark read")
	   ("f"
	    ("+flagged")
	    "Flag")
	   ("s"
	    ("+spam" "-inbox")
	    "Mark as spam")
	   ("d"
	    ("+deleted" "-inbox")
	    "Delete")
	   ("m"
	    ("+muted")
	    "Mute Thread"))))

	:config
	(defun sb/notmuch (arg)
	  "Launch notmuch. If ran with prefix arg, launch mbsync in the
	background, and automatically refresh the current buffer when
	done. With two prefix args, launch mbsync with `--all` rather
	than just for inboxes."
	  (interactive "p")
	  (notmuch)
	  (if (> arg 1)
	      (set-process-sentinel
	       (sb/mbsync (if (eq 4 arg) "inbox" "--all"))
	       (lambda (proc state)
		 (message nil) ;; clear minibuffer
		 (notmuch-poll-and-refresh-this-buffer))))))

    #+END_SRC

    #+BEGIN_SRC conf :eval never :exports code :tangle ~/.mbsyncrc
      IMAPAccount lambda
      Host imap.gmail.com
      User rising.lambda@gmail.com
      SSLType IMAPS
      AuthMechs LOGIN
      #PassCmd "security find-generic-password -s lambda -w"
      PassCmd "cat ~/.authinfo|grep rising.lambda@gmail.com|awk '{print $6}'"
      # To rotate:
      # > security delete-generic-password -s mbsync-gandi-password
      # > security add-generic-password -a stig@brautaset.org -s mbsync-gandi-password -w APP-SPECIFIC-PASSWORD

      IMAPStore remote
      Account lambda

      MaildirStore local
      Path ~/.mails/rising.lambda/
      Inbox ~/.mails/rising.lambda/INBOX
      Trash trash

      Channel inbox
      Master :remote:
      Slave :local:
      Create Slave
      SyncState *

      Channel sent
      Master :remote:Sent
      Slave :local:sent
      Create Slave
      SyncState *

      Channel org-mode
      Master :remote:org-mode
      Slave :local:org-mode
      Create Slave
      SyncState *
      MaxMessages 500
      ExpireUnread yes
      Expunge Both

      Channel clojure
      Master :remote:clojure
      Slave :local:clojure
      Create Slave
      SyncState *
      MaxMessages 500
      ExpireUnread yes
      Expunge Both

      # Channel tuls
      # Master :remote:tuls
      # Slave :local:tuls
      # Create Slave
      # SyncState *
      # MaxMessages 500
      # Expunge Both

      Channel archive
      Master :remote:Archive
      Slave :local:archive
      Create Slave
      SyncState *
    #+END_SRC

    #+BEGIN_SRC shell :eval never :exports code :tangle no :comments link
      notmuch config set user.name "neo"
      notmuch config set user.primary_email "rising.lambda@gmail.com"
      notmuch config set user.primary_email "sjkyspa@gmail.com;other@gmail.com;"
    #+END_SRC


    #+BEGIN_SRC conf :eval never :exports code :tangle ~/.notmuch-config
      # 相对于 HOMEDIR ~ 的目录
      [database]
      path=.mails/

      [user]
      name=neo
      primary_email=rising.lambda@gmail.com
      other_email=sjkyspa@gmail.com;

      [new]
      tags=new;unread;inbox
      ignore=.mbsyncstate;.mbsyncstate.journal;.mbsyncstate.lock;.mbsyncstate.new;.uidvalidity;.isyncuidmap.db

      [search]
      exclude_tags=deleted;spam;

      [maildir]
      synchronize_flags=true
    #+END_SRC

    #+BEGIN_SRC conf :eval never :exports code :tangle ~/.msmtprc
      # default config
      defaults
      port 587
      tls on
      tls_trust_file /etc/ssl/cert.pem
      auth on

      # config for the rising.lambda
      account rising.lambda@gmail.com
      host smtp.gmail.com
      port 587
      tls on
      tls_starttls on
      auth on
      user rising.lambda
      from rising.lambda@gmail.com
      passwordeval cat ~/.authinfo|grep rising.lambda@gmail.com|awk '{print $6}'
    #+END_SRC


    #+BEGIN_SRC elisp :eval never :exports code :comments link
      (setq message-send-mail-function 'message-send-mail-with-sendmail
	    sendmail-program "msmtp"
	    message-sendmail-envelope-from 'header
	    mail-envelope-from 'header
	    mail-specify-envelope-from t)

      (setq message-kill-buffer-on-exit t)
    #+END_SRC

    #+BEGIN_SRC elisp :eval never :exports code :comments link
      (provide 'init-email)
    #+END_SRC
