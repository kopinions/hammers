#+TITLE:  lisp 公共函数
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** 文件操作
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-common.el") :comments link
     (require 'em-glob)
     (defun m/resolve (path)
       "Interpolation variable like ${var} $var in PATH with environment or elisp variables."
       (if (string-prefix-p "~/" path)
	   (m/resolve (concat (getenv "HOME") (substring path 1)))
	 (let ((s (or (string-match "${\\([^ }]*\\)}" path)
		      (string-match "$\\([A-z_]*\\)" path)))
	       (e (match-end 0)))
	   (if (not s)
	       path
	     (m/resolve
	      (concat (substring path 0 s) (m/var (match-string 1 path)) (substring path e))))))
       )

     (defun m/files (glob &optional full)
       "Give an GLOB, return files matched GLOB.  If FULL is specified, return absolute pathnames for each file."
       (interactive "M")
       (let ((resolved (m/resolve glob)))
	 (condition-case nil
	     (directory-files (file-name-directory resolved)
			      full
			      (eshell-glob-regexp (file-name-nondirectory resolved)))
	   (error '()))))

     (defun m/var (name)
       "Return value of variable or environment identified by NAME."
       (or (getenv name) (eval (read name))))

     (defun tangle-if-absent (path)
       (let* ((filename (m/resolve path)))
	 (if (file-exists-p filename)
	     "no"
	   filename)))
   #+END_SRC

** 系统调用
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-common.el") :comments link
     (defun m/system (program &rest args)
       "Run PROGRAM with ARGS and return the exit code and output in a list."
       (with-temp-buffer 
	 (list (apply 'call-process program nil (current-buffer) nil args)
	       (buffer-string))))
   #+END_SRC

** 交互设置
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-common.el") :comments link
     (use-package noflet)
     
     (defun m/bypass-prompt (function &rest args)
       "Call FUNCTION with ARGS, bypassing all prompts.
     This includes both `y-or-n-p' and `yes-or-no-p'."
       (require 'noflet)
       (noflet
	   ((y-or-n-p    (prompt) t)
	    (yes-or-no-p (prompt) t))
	 (apply function args)))
   #+END_SRC


** 时间操作
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-common.el") :noweb yes :comments link
     (use-package ts)
   #+END_SRC

   
** 模块导出
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-common.el") :noweb yes :comments link
     (provide 'init-common)
   #+END_SRC   

