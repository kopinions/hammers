#+TITLE:  Orgmode
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: 使用文学编程书写的，orgmode 的配置文件
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments both
#+PROPERTY:    header-args        :mkdirp yes
#+PROPERTY:    header-args:elisp  :tangle "~/.emacs.d/lisp/init-literate.el"
#+PROPERTY:    header-args:shell  :tangle no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js


*** 从系统软件中获取链接
    当系统为 macos 时，我们可以通过安装 [[https://github.com/xuchunyang/grab-mac-link.el][grab-mac-link]] 插件来获取 chrome/firefox/safia 中的链接，并且可以选择
    plain/markdown/orgmode 的形式来插入到当前编辑的文件中。

    #+BEGIN_SRC elisp
    (use-package grab-mac-link
      :if (eq m/os 'macos))
    #+END_SRC

*** org-mode 代码块异步执行配置
#+BEGIN_SRC elisp
(use-package ob-async
  :config
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (add-hook 'ob-async-pre-execute-src-block-hook
      '(lambda ()
         (setq org-plantuml-jar-path "~/.emacs.d/plantuml.jar"))))
#+END_SRC

*** 截屏配置

#+BEGIN_SRC elisp
(defun m/org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (org-display-inline-images)
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-nondirectory (buffer-file-name))
                  "_imgs/"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (unless (file-exists-p (file-name-directory filename))
    (make-directory (file-name-directory filename)))
  ; take screenshot
  (if (eq system-type 'darwin)
      (call-process "screencapture" nil nil nil "-i" filename))
  (if (eq system-type 'gnu/linux)
      (call-process "import" nil nil nil filename))
  ; insert into file if correctly taken
  (if (file-exists-p filename)
    (insert (concat "[[file:" filename "]]"))))
#+END_SRC

*** org-mode 配置
#+BEGIN_SRC elisp
  (use-package org
    :custom
    (org-src-fontify-natively t)
    (org-descriptive-links nil)
    (org-special-ctrl-a/e t)
    (org-use-sub-superscripts '{})
    (org-export-with-sub-superscripts '{})
    (private-directory "~/agendas")
    (org-directory private-directory)
    (org-ditaa-jar-path "~/.emacs.d/ditaa.jar")
    (org-plantuml-jar-path "~/.emacs.d/plantuml.jar")
    (org-confirm-babel-evaluate nil)
    (org-clock-out-remove-zero-time-clocks t)
    (org-startup-folded 'content)
    (org-columns-default-format "%50ITEM(Task) %5TODO(Todo) %10Effort(Effort){:} %10CLOCKSUM(Clock) %2PRIORITY %TAGS")
    (org-agenda-columns-add-appointments-to-effort-sum t)
    (org-agenda-span 'day)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-log-mode-items (quote (closed clock)))
    (org-agenda-clockreport-parameter-plist
     '(:maxlevel 5 :block t :tstart t :tend t :emphasize t :link t :narrow 80 :indent t :formula nil :timestamp t :level 5 :tcolumns nil :formatter nil))
    (org-global-properties (quote ((
				    "Effort_ALL" . "00:05 00:10 00:15 00:30 01:00 01:30 02:00 02:30 03:00"))))
    (org-agenda-files `(
			,(expand-file-name "inbox.org" private-directory)
			,(expand-file-name "notes.org" private-directory)
			,(expand-file-name "todos.org" private-directory)
			,(expand-file-name "routine.org" private-directory)
			))
    (org-support-shift-select t)

    ;; Targets start with the file name - allows creating level 1 tasks
    ;;(setq org-refile-use-outline-path (quote file))
    (org-refile-use-outline-path t)
    (org-outline-path-complete-in-steps nil)

    ;; Allow refile to create parent tasks with confirmation
    (org-refile-use-cache nil)
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
    (org-archive-mark-done nil)
	;;; Agenda views
    (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3))
    (org-archive-location "%s_archive::* Archive")
    ;; (org-agenda-current-time-string "------------NOW------------")
    ;; (org-agenda-time-grid
    ;;     '((daily today require-timed)
    ;;       (0800 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300)
    ;;       " ........ "
    ;;       "---------------------------"))
    (org-clock-persist t)
    (org-log-done t)
    (org-edit-timestamp-down-means-later t)
    (org-hide-emphasis-markers t)
    (org-catch-invisible-edits 'show)
    (org-export-coding-system 'utf-8)
    (org-fast-tag-selection-single-key 'expert)
    (org-clock-in-resume t)
    ;; Save clock data and notes in the LOGBOOK drawer
    (org-clock-into-drawer t)
    ;; Save state changes in the LOGBOOK drawer
    (org-log-into-drawer t)
    ;; Removes clocked tasks with 0:00 duration
    (org-clock-out-remove-zero-time-clocks t)
    ;; Show clock sums as hours and minutes, not "n days" etc.
    (org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
    (org-capture-templates
     `(
       ;; tasks
       ("t" "general task." entry
	(file ,(expand-file-name "inbox.org" private-directory))
	"* NEXT %?\n%U\n" :clock-resume 1)
       ("n" "notes." entry
	(file ,(expand-file-name "notes.org" private-directory))
	"* %? :NOTE:\n%U\n%a\n" :clock-resume t)
       ("r" "retrospective note" plain (file+olp+datetree ,(expand-file-name "retrospect.org" private-directory))
	,(concat "%[" (expand-file-name "retrospect.tmpl" private-directory) "]")
	:tree-type week)
       ("i" "interrupt task" entry
	(file ,(expand-file-name "inbox.org" private-directory))
	"* NEXT %?\n%U\n" :clock-in 1 :clock-keep 1)
       ("e" "Collect hacking Emacs ideas!" item
	(file+headline ,(expand-file-name "inbox.org" private-directory) "Hacking Emacs")
	"- [ ] %?"
	:prepend t)
       ("p" "Add an event to the private calendar." entry
	(file+olp schedule-file "Calendar" "2019" "Private")
	"** %?\n   SCHEDULED: <%(org-read-date)>\n"
	:prepend t)
       ("w" "Add an event to the work calendar." entry
	(file+olp schedule-file "Calendar" "2019" "Work")
	"** %?\n   SCHEDULED: <%(org-read-date)>\n")
       ("l" "Store the link of the current position in the clocking task." item
	(clock)
	"- %A\n"
	:immediate t :prepend t)
       ;; code-reading
       ("c" "Store the code reading memo to today's diary with metadata." entry
	(file+headline ladicle/get-today-diary "Code")
	;;(file+headline ladicle/get-today-diary "Code")
	"** %? %(ladicle/code-metadata)\n%A\n")))
    (org-agenda-custom-commands
     `(("N" "Notes" tags "NOTE"
	((org-agenda-overriding-header "Notes")
	 (org-tags-match-list-sublevels t)))
       ("g" "GTD"
	((agenda "" nil)
	 (tags "INBOX"
	       ((org-agenda-overriding-header "Inbox")
		(org-agenda-skip-function
		 '(lambda ()
		    (or (org-agenda-skip-subtree-if 'todo '("DONE"))
			(org-agenda-skip-entry-if 'nottodo '("TODO", "NEXT")))))
		(org-tags-match-list-sublevels t)))
	 (stuck ""
		((org-agenda-overriding-header "Stuck Projects")
		 (org-agenda-tags-todo-honor-ignore-options t)
		 (org-tags-match-list-sublevels t)
		 (org-agenda-todo-ignore-deadlines 'all)
		 (org-agenda-todo-ignore-scheduled 'all)))
	 (tags-todo "-INBOX"
		    ((org-agenda-overriding-header "Next Actions")
		     (org-agenda-tags-todo-honor-ignore-options t)
		     (org-agenda-todo-ignore-scheduled 'all)
		     (org-agenda-todo-ignore-deadlines 'all)
		     (org-agenda-skip-function
		      '(lambda ()
			 (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
			     (org-agenda-skip-entry-if 'nottodo '("NEXT")))))
		     (org-tags-match-list-sublevels t)
		     (org-agenda-sorting-strategy
		      '(todo-state-down effort-up category-keep))))
	 (tags-todo "-INBOX/PROJECT"
		    ((org-agenda-overriding-header "Projects")
		     (org-tags-match-list-sublevels t)
		     (org-agenda-sorting-strategy
		      '(category-keep))))
	 (tags-todo "-INBOX/-NEXT"
		    ((org-agenda-overriding-header "Orphaned Tasks")
		     (org-agenda-tags-todo-honor-ignore-options t)
		     (org-agenda-todo-ignore-scheduled 'all)
		     (org-agenda-todo-ignore-deadlines 'all)
		     (org-agenda-skip-function
		      '(lambda ()
			 (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
			     (org-agenda-skip-subtree-if 'nottododo '("TODO")))))
		     (org-tags-match-list-sublevels t)
		     (org-agenda-sorting-strategy
		      '(category-keep))))
	 (tags-todo "/WAITING"
		    ((org-agenda-overriding-header "Waiting")
		     (org-agenda-tags-todo-honor-ignore-options t)
		     (org-agenda-todo-ignore-scheduled 'all)
		     (org-agenda-todo-ignore-deadlines 'all)
		     (org-agenda-sorting-strategy
		      '(category-keep))))
	 (tags-todo "/DELEGATED"
		    ((org-agenda-overriding-header "Delegated")
		     (org-agenda-tags-todo-honor-ignore-options t)
		     (org-agenda-todo-ignore-scheduled 'all)
		     (org-agenda-todo-ignore-deadlines 'all)
		     (ORG-agenda-sorting-strategy
		      '(category-keep))))
	 (tags-todo "-INBOX"
		    ((org-agenda-overriding-header "On Hold")
		     (org-agenda-skip-function
		      '(lambda ()
			 (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
			     (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
		     (org-tags-match-list-sublevels nil)
		     (org-agenda-sorting-strategy
		      '(category-keep))))
	 ;; (tags-todo "-NEXT"
	 ;;            ((org-agenda-overriding-header "All other TODOs")
	 ;;             (org-match-list-sublevels t)))
	 ))  ))

    :custom-face
    (org-link ((t (:foreground "#ebe087" :underline t))))
    (org-list-dt ((t (:foreground "#bd93f9"))))
    (org-special-keyword ((t (:foreground "#6272a4"))))
    (org-todo ((t (:background "#272934" :foreground "#51fa7b" :weight bold))))
    (org-document-title ((t (:foreground "#f1fa8c" :weight bold))))
    (org-done ((t (:background "#373844" :foreground "#216933" :strike-through nil :weight bold))))
    (org-footnote ((t (:foreground "#76e0f3"))))

    ;; do not scale outline header
    ;; (org-level-1 ((t (:inherit outline-1 :height 1.0))))
    ;; (org-level-2 ((t (:inherit outline-2 :height 1.0))))
    ;; (org-level-3 ((t (:inherit outline-3 :height 1.0))))
    ;; (org-level-4 ((t (:inherit outline-4 :height 1.0))))
    ;; (org-level-5 ((t (:inherit outline-5 :height 1.0))))
    :bind (("C-c c" . org-capture)
	   ("C-c a" . org-agenda)
	   ("C-c b" . org-switchb)
	   ("C-x C-l" . org-store-link)
	   :map org-mode-map
	   ("C-c i" . org-clock-in)
	   ("C-c o" . org-clock-out)
	   ("C-c n" . org-narrow-to-subtree)
	   ("C-c b" . org-narrow-to-block)
	   ("C-c w" . widen)
	   ("C-c e" . org-set-effort))
    :hook
    (kill-emacs . m/org-clock-out-and-save-when-exit)
    (org-clock-in .
		  (lambda ()
		    (setq org-mode-line-string (m/task-clocked-time))
		    (run-at-time 0 60 '(lambda ()
					 (setq org-mode-line-string (m/task-clocked-time))
					 (force-mode-line-update)))
		    (force-mode-line-update)
		    (request "http://127.0.0.1:13140"
			     :type "POST"
			     :data (json-encode `(("type" . "FOCUSED")
						  ("title" . ,(or org-clock-current-task "interrupt task"))
						  ("duration" . 45)))
			     :headers '(("Content-Type" . "application/json")))))
    (org-clock-out . (lambda () (request "http://127.0.0.1:13140"
		:type "POST"
		:data (json-encode `(("type" . "UNFOCUSED")
			("title" . "Have a rest")
			("duration" . 5)))
		:headers '(("Content-Type" . "application/json")))))
    (org-clock-in-last . (lambda () (request "http://127.0.0.1:13140"
		:type "POST"
		:data (json-encode `(("type" . "FOCUSED")
			("title" . ,(or org-clock-current-task "interrupt task"))
			("duration" . 45)))
		:headers '(("Content-Type" . "application/json")))))
    (org-agenda-after-show . org-show-entry)
    (org-agenda-mode . hl-line-mode)
    (org-mode . (lambda ()
		  (dolist (key '("C-'" "C-," "C-."))
		    (unbind-key key org-mode-map))))
    :preface
    (defun m/org-clock-out-and-save-when-exit ()
      "Save buffers and stop clocking when kill emacs."
      (ignore-errors (org-clock-out) t)
      (save-some-buffers t))
    (defun m/task-clocked-time ()
      "Return a string with the clocked time and effort, if any"
      (interactive)
      (let* ((clocked-time (org-clock-get-clocked-time))
	     (h (truncate clocked-time 60))
	     (m (mod clocked-time 60))
	     (work-done-str (format "%d:%02d" h m)))
	(if org-clock-effort
	    (let* ((effort-in-minutes
		    (org-duration-to-minutes org-clock-effort))
		   (effort-h (truncate effort-in-minutes 60))
		   (effort-m (truncate (mod effort-in-minutes 60)))
		   (effort-str (format "%d:%02d" effort-h effort-m)))
	      (format "%s/%s" work-done-str effort-str))
	  (format "%s" work-done-str))))
    :config
    (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
    (advice-add 'org-deadline       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
    (advice-add 'org-schedule       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
    (advice-add 'org-agenda-schedule       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
    (advice-add 'org-agenda-capture       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
    (advice-add 'org-store-log-note :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
    (advice-add 'org-todo           :after (lambda (&rest _rest)  (org-save-all-org-buffers)))

    (setq org-todo-keywords
	  (quote (
		  (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
		  (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
		  (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")
		  ))
	  org-todo-repeat-to-state "NEXT")
    (setq org-todo-keyword-faces
	  '(("WAIT" . (:foreground "#6272a4":weight bold))
	    ("NEXT"   . (:foreground "#f1fa8c" :weight bold))
	    ("CARRY/O" . (:foreground "#6272a4" :background "#373844" :weight bold))))
    ;; load babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (dot . t)
       (ditaa . t)
       (dot . t)
       (emacs-lisp . t)
       (gnuplot . t)
       (haskell . nil)
       (latex . t)
       (ledger . t)
       (ocaml . nil)
       (octave . t)
       (plantuml . t)
       (python . t)
       (ruby . t)
       (screen . nil)
       (shell . t)
       (sql . t)
       (sqlite . t))))
#+END_SRC
*** org-mode 番茄工作法
#+BEGIN_SRC elisp
;; Pomodoro
(use-package org-pomodoro
	    :after (org org-agenda)
	    :custom
	    (org-pomodoro-ask-upon-killing t)
	    (org-pomodoro-keep-killed-pomodoro-time t)
	    (org-pomodoro-short-break-length 5)
	    (org-pomodoro-long-break-length 15)
	    (org-pomodoro-length 45)
  	    :config
	    (use-package request)
	    :bind 
	    (:map org-agenda-mode-map
	                ("P" . org-pomodoro)))
#+END_SRC

*** org mode 可以拖拽下载
#+BEGIN_SRC elisp
;; Download Drag&Drop images
(use-package org-download
  :after (org))

#+END_SRC

*** org mode 图标设置
#+BEGIN_SRC elisp
;; Pretty bullets
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-face-name (quote org-bullet-face))
  (org-bullets-mode 1)
  (setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥")))
#+END_SRC

*** org-mode 博客
#+BEGIN_SRC elisp
(use-package ox-gfm)
(use-package ox-hugo
      :after (ox org)
      :custom
      (org-blackfriday--org-element-string '((src-block . "Code")
      (table . "Table")
      (figure . "Figure"))))


#+END_SRC

*** org-mode retrospect temlate
#+BEGIN_SRC org :tangle "~/agendas/retrospect.tmpl" :noweb yes :mkdirp yes
|----------------------------+---|
| 昨天学到什么？             |   |
|----------------------------+---|
| 昨天得到什么教训？         |   |
|----------------------------+---|
| 昨天做了哪些换位思考？     |   |
|----------------------------+---|
| 昨天做了哪些倒推思维训练？ |   |
|----------------------------+---|
| 昨天发生的事情             |   |
| 我能提出什么问题           |   |
|----------------------------+---|
| 接下来有什么计划？         |   |
|                            |   |
|                            |   |
|                            |   |
|----------------------------+---|
#+END_SRC

*** org-mode gtd files
#+BEGIN_SRC org :tangle no :noweb yes :mkdirp yes
#+CATEGORY: Inbox
#+FILETAGS: INBOX
#+END_SRC
** provide
#+BEGIN_SRC elisp
(provide 'init-literate)
#+END_SRC
