#+TITLE:  Orgmode
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: 使用文学编程书写的，orgmode 的配置文件
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments both
#+PROPERTY:    header-args        :mkdirp yes
#+PROPERTY:    header-args:elisp  :tangle "~/.emacs.d/lisp/init-literate.el"
#+PROPERTY:    header-args:shell  :tangle no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

*** 禁止 emacs 自带的 orgmode
    #+BEGIN_SRC elisp :eval never :exports code
      (assq-delete-all 'org package--builtins)
      (assq-delete-all 'org package--builtin-versions)
    #+END_SRC

*** 从系统软件中获取链接
    当系统为 macos 时，我们可以通过安装 [[https://github.com/xuchunyang/grab-mac-link.el][grab-mac-link]] 插件来获取 chrome/firefox/safia 中的链接，并且可以选择
    plain/markdown/orgmode 的形式来插入到当前编辑的文件中。

    #+BEGIN_SRC elisp :eval never :exports code
      (use-package grab-mac-link
	:if (eq m/os 'macos))
    #+END_SRC

*** org-mode 代码块异步执行配置
    #+BEGIN_SRC elisp :eval never :exports code
      (use-package ob-async
	:hook
	(org-babel-after-execute . org-redisplay-inline-images))
    #+END_SRC

*** 截屏配置

    #+BEGIN_SRC elisp :eval never :exports code
      (defun m/org-screenshot ()
	"Take a screenshot into a time stamped unique-named file in the
      same directory as the org-buffer and insert a link to this file."
	(interactive)
	(org-display-inline-images)
	(setq filename
	      (concat
	       (make-temp-name
		(concat (file-name-nondirectory (buffer-file-name))
			"_imgs/"
			(format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
	(unless (file-exists-p (file-name-directory filename))
	  (make-directory (file-name-directory filename)))
					      ; take screenshot
	(if (eq system-type 'darwin)
	    (call-process "screencapture" nil nil nil "-i" filename))
	(if (eq system-type 'gnu/linux)
	    (call-process "import" nil nil nil filename))
					      ; insert into file if correctly taken
	(if (file-exists-p filename)
	    (insert (concat "[[file:" filename "]]"))))
    #+END_SRC

*** org-mode 配置
    #+BEGIN_SRC elisp :eval never :exports code
      (setq org-agenda-dir (expand-file-name "agendas" m/home.d))
      (use-package org
	:diminish org-mode
	:custom
	(org-src-fontify-natively t)
	(org-descriptive-links nil)
	(org-special-ctrl-a/e t)
	(org-use-sub-superscripts '{})
	(org-export-with-sub-superscripts '{})
	(org-confirm-babel-evaluate nil)
	(org-startup-folded 'content)
	(org-edit-timestamp-down-means-later t)
	(org-hide-emphasis-markers t)
	(org-catch-invisible-edits 'show)
	(org-export-coding-system 'utf-8)
	(org-fast-tag-selection-single-key 'expert)
	:custom-face
	(org-link ((t (:foreground "#ebe087" :underline t))))
	(org-list-dt ((t (:foreground "#bd93f9"))))
	(org-document-title ((t (:foreground "#f1fa8c" :weight bold))))
	(org-footnote ((t (:foreground "#76e0f3"))))
	;; 当通过 org-previous/next-item 在 plain list 中导航的时候，循环导航 
	(org-list-use-circular-motion t)

	;; do not scale outline header
	;; (org-level-1 ((t (:inherit outline-1 :height 1.0))))
	;; (org-level-2 ((t (:inherit outline-2 :height 1.0))))
	;; (org-level-3 ((t (:inherit outline-3 :height 1.0))))
	;; (org-level-4 ((t (:inherit outline-4 :height 1.0))))
	;; (org-level-5 ((t (:inherit outline-5 :height 1.0))))
	:bind 
	(("C-c b" . org-switchb)
	 ("C-x C-l" . org-store-link)
	 :map org-mode-map
	 ("C-c n" . org-narrow-to-subtree)
	 ("C-c b" . org-narrow-to-block)
	 ("C-c {" . sp-wrap-curly)
	 ("C-c (" . sp-wrap-round)
	 ("C-c [" . sp-wrap-square)
	 ("C-c w" . widen)
	 ("S-<up>" . org-previous-item)
	 ("S-<down>" . org-next-item)
	 )
	:hook
	(org-mode . (lambda ()
		      (dolist (key '("C-'" "C-," "C-."))
			(unbind-key key org-mode-map))))
	:config
	(advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
	;; load babel languages
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((R . t)
	   (dot . t)
	   (ditaa . t)
	   (emacs-lisp . t)
	   (gnuplot . t)
	   (haskell . nil)
	   (latex . t)
	   (ledger . t)
	   (ocaml . nil)
	   (octave . t)
	   (plantuml . t)
	   (python . t)
	   (ruby . t)
	   (screen . nil)
	   (shell . t)
	   (sql . t)
	   (sqlite . t))))
    #+END_SRC

*** org-mode 日程配置
    
    #+BEGIN_SRC elisp :eval never :exports code
      (use-package org
	:preface
	(defun m/refile-targets ()
	  "Refile targets with inbox.org excluded"
	  (let ((excluded '("mobile.org" "inbox.org" "notes.org" "meeting.org" "retrospect.org" "archive.org")))
	    (seq-filter (lambda (f) (if (member (file-name-nondirectory f) excluded) nil t)) org-agenda-files)))
	:custom
	(org-directory "agendas")
	(org-agenda-include-diary t)
	(org-agenda-time-grid
	 '((daily today require-timed)
	   (800 1000 1200 1400 1600 1800 2000)
	   " ........ "
	   "---------------------------"))
	(org-clock-out-remove-zero-time-clocks t)
	(org-columns-default-format "%50ITEM(Task) %5TODO(Todo) %10Effort(Effort){:} %10CLOCKSUM(Clock) %2PRIORITY %TAGS")
	(org-agenda-columns-add-appointments-to-effort-sum t)
	(org-agenda-span 'day)
	(org-agenda-skip-scheduled-if-done t)
	(org-agenda-skip-deadline-if-done t)
	(org-log-done t)
	(org-agenda-log-mode-items (quote (closed clock)))
	(org-agenda-clockreport-parameter-plist
	 '(:maxlevel 5 :block t :tstart t :tend t :emphasize t :link nil :narrow 80 :indent t :compact t :fileskip0 t :formula % :level 4 :tcolumns nil :formatter nil))
	(org-global-properties (quote ((
					"Effort_ALL" . "00:05 00:10 00:15 00:30 01:00 01:30 02:00 02:30 03:00"))))
	(org-agenda-files `(
			    ,(expand-file-name "inbox.org" org-agenda-dir)
			    ,(expand-file-name "todos.org" org-agenda-dir)
			    ,(expand-file-name "mobile.org" org-agenda-dir)
			    ,(expand-file-name "routine.org" org-agenda-dir)
			    ,(expand-file-name "meeting.org" org-agenda-dir)
			    ,(expand-file-name "retrospect.org" org-agenda-dir)
			    ))
	(org-archive-location (concat (expand-file-name "archive.org" org-agenda-dir) "::datetree/* Finished Tasks"))
	(org-support-shift-select t)

	;; Targets start with the file name - allows creating level 1 tasks
	;;(setq org-refile-use-outline-path (quote file))
	(org-refile-use-outline-path t)
	(org-outline-path-complete-in-steps nil)

	;; Allow refile to create parent tasks with confirmation
	(org-refile-use-cache t)

	(org-refile-allow-creating-parent-nodes 'confirm)
	(org-refile-targets '((m/refile-targets :maxlevel . 5)))
	(org-archive-mark-done nil)
	      ;;; Agenda views
	(org-agenda-custom-commands
	 `(("N" "Notes" tags "NOTE"
	    ((org-agenda-overriding-header "Notes")
	     (org-tags-match-list-sublevels t)))
	   ("a" "Agenda"
	    ((agenda "" ((org-agenda-span 1)                      ; daily agenda
			 (org-deadline-warning-days 0)            ; 7 day advanced warning for deadlines
			 (org-agenda-scheduled-leaders '("" "Due %2dx: "))
			 (org-agenda-overriding-header "Today's Schedule:")
			 (org-agenda-start-day nil)
			 (org-agenda-start-on-weekday nil)
			 (org-agenda-compact-blocks t)
			 (org-agenda-use-time-grid nil)))
	     (agenda "" ((org-agenda-span 7)                      ;; overview of appointments
			 (org-agenda-start-on-weekday nil)         ;; calendar begins today
			 (org-agenda-scheduled-leaders '("" "Due %2dx: "))
			 (org-agenda-deadline-leaders '("" "Due in %2dx: "))
			 (org-agenda-start-day "+1d")
			 (org-agenda-show-future-repeats nil)
			 (org-agenda-entry-types '(:timestamp :sexp :scheduled :deadline))))))
	   ("g" "GTD"
	    ((agenda "" ((org-agenda-span 1)                      ; daily agenda
			 (org-deadline-warning-days 0)            ; 7 day advanced warning for deadlines
			 (org-agenda-scheduled-leaders '("" "Due %2dx: "))
			 (org-agenda-overriding-header "Today's Schedule:")
			 (org-agenda-start-day nil)
			 (org-agenda-start-on-weekday nil)
			 (org-agenda-compact-blocks t)
			 (org-agenda-use-time-grid t)))
	     (tags "INBOX"
		   ((org-agenda-overriding-header "Inbox")
		    (org-agenda-skip-function
		     '(lambda ()
			(or (org-agenda-skip-subtree-if 'todo '("DONE"))
			    (org-agenda-skip-entry-if 'nottodo '("TODO" "NEXT")))))
		    (org-tags-match-list-sublevels t)))
	     (tags-todo "-INBOX"
			((org-agenda-overriding-header "Next Actions")
			 (org-agenda-tags-todo-honor-ignore-options t)
			 (org-agenda-todo-ignore-scheduled 'all)
			 (org-agenda-todo-ignore-deadlines 'all)
			 (org-agenda-skip-function
			  '(lambda ()
			     (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
				 (org-agenda-skip-entry-if 'nottodo '("NEXT")))))
			 (org-tags-match-list-sublevels t)
			 (org-agenda-sorting-strategy
			  '(todo-state-down effort-up category-keep))))
	     (stuck ""
		    ((org-agenda-overriding-header "Stuck Projects")
		     (org-agenda-tags-todo-honor-ignore-options t)
		     (org-tags-match-list-sublevels t)
		     (org-agenda-files `(
					 ,(expand-file-name "todos.org" org-agenda-dir)
					 ,(expand-file-name "routine.org" org-agenda-dir)
					 ))
		     (org-agenda-skip-function
		      '(lambda ()
			 (org-agenda-skip-entry-if 'nottodo '("PROJECT"))))
		     (org-agenda-todo-ignore-deadlines 'all)
		     (org-agenda-todo-ignore-scheduled 'all)))
	     (tags-todo "-INBOX/PROJECT"
			((org-agenda-overriding-header "Projects")
			 (org-tags-match-list-sublevels t)
			 (org-agenda-sorting-strategy
			  '(category-keep))))
	     (tags-todo "-INBOX/-NEXT"
			((org-agenda-overriding-header "Orphaned Tasks")
			 (org-agenda-tags-todo-honor-ignore-options t)
			 (org-agenda-todo-ignore-scheduled 'all)
			 (org-agenda-todo-ignore-deadlines 'all)
			 (org-agenda-skip-function
			  '(lambda ()
			     (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
				 (org-agenda-skip-subtree-if 'nottododo '("TODO")))))
			 (org-tags-match-list-sublevels t)
			 (org-agenda-sorting-strategy
			  '(category-keep))))
	     (tags-todo "/WAITING"
			((org-agenda-overriding-header "Waiting")
			 (org-agenda-tags-todo-honor-ignore-options t)
			 (org-agenda-todo-ignore-scheduled 'all)
			 (org-agenda-todo-ignore-deadlines 'all)
			 (org-agenda-sorting-strategy
			  '(category-keep))))
	     (tags-todo "/DELEGATED"
			((org-agenda-overriding-header "Delegated")
			 (org-agenda-tags-todo-honor-ignore-options t)
			 (org-agenda-todo-ignore-scheduled 'all)
			 (org-agenda-todo-ignore-deadlines 'all)
			 (ORG-agenda-sorting-strategy
			  '(category-keep))))
	     (tags-todo "-INBOX"
			((org-agenda-overriding-header "On Hold")
			 (org-agenda-skip-function
			  '(lambda ()
			     (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
				 (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
			 (org-tags-match-list-sublevels nil)
			 (org-agenda-sorting-strategy
			  '(category-keep))))

	     ;; (tags-todo "-NEXT"
	     ;;            ((org-agenda-overriding-header "All other TODOs")
	     ;;             (org-match-list-sublevels t)))
	     ))))
	:bind
	(("C-c c" . org-capture)
	 ("C-c a" . org-agenda)
	 :map org-mode-map
	 ("C-c i" . org-clock-in)
	 ("C-c o" . org-clock-out)
	 ("C-c e" . org-set-effort))
	:hook
	(org-agenda-after-show . org-show-entry)
	(org-agenda-mode . hl-line-mode)
	:custom-face
	(org-special-keyword ((t (:foreground "#6272a4"))))
	(org-todo ((t (:background "#272934" :foreground "#51fa7b" :weight bold))))
	(org-done ((t (:background "#373844" :foreground "#216933" :strike-through nil :weight bold))))
	:config
	(advice-add 'org-deadline       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
	(advice-add 'org-schedule       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
	(advice-add 'org-agenda-schedule       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
	(advice-add 'org-agenda-capture       :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
	(advice-add 'org-store-log-note :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
	(advice-add 'org-todo           :after (lambda (&rest _rest)  (org-save-all-org-buffers)))
	(setq org-todo-keywords
	      (quote (
		      (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
		      (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
		      (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")
		      ))
	      org-todo-repeat-to-state "NEXT")
	(setq org-todo-keyword-faces
	      '(("WAIT" . (:foreground "#6272a4":weight bold))
		("NEXT"   . (:foreground "#f1fa8c" :weight bold))
		("CARRY/O" . (:foreground "#6272a4" :background "#373844" :weight bold)))))
    #+END_SRC
*** org-mode capture 配置
    #+BEGIN_SRC elisp
      (use-package org
	:custom
	(org-capture-templates
	 `(
	   ;; tasks
	   ("t" "general task." entry
	    (file ,(expand-file-name "inbox.org" org-agenda-dir))
	    "* NEXT %?\n%U\n" :clock-resume 1)
	   ("n" "notes." entry
	    (file ,(expand-file-name "notes.org" org-agenda-dir))
	    "* %? :NOTE:\n%U\n%a\n" :clock-resume t)
	   ("c" "code snippet" plain (file ,(expand-file-name "snippets.org" org-agenda-dir))
	    ,(concat "%[" (expand-file-name "snippet.tmpl" org-agenda-dir) "]")
	    :tree-type week)
	   ("v" "vocabulary" table-line (file ,(expand-file-name "vocabulary.org" org-agenda-dir))
	    ,(concat "%[" (expand-file-name "vocabulary.tmpl" org-agenda-dir) "]")
	    :tree-type week)
	   ("r" "retrospective note" plain (file+olp+datetree ,(expand-file-name "retrospect.org" org-agenda-dir))
	    ,(concat "%[" (expand-file-name "retrospect.tmpl" org-agenda-dir) "]")
	    :tree-type week)
	   ("m" "meeting note" plain (file+olp+datetree ,(expand-file-name "meeting.org" org-agenda-dir))
	    ,(concat "%[" (expand-file-name "meeting.tmpl" org-agenda-dir) "]")
	    :tree-type week :clock-in 1 :empty-lines 1 :kill-buffer 1)
	   ("i" "interrupt task" entry
	    (file ,(expand-file-name "inbox.org" org-agenda-dir))
	    "* NEXT %^{what has interrupted?}" :clock-in 1 :clock-keep 1)
	   ("e" "Collect hacking Emacs ideas!" item
	    (file+headline ,(expand-file-name "inbox.org" org-agenda-dir) "Hacking Emacs")
	    "- [ ] %?"
	    :prepend t)
	   ("p" "Add an event to the private calendar." entry
	    (file+olp schedule-file "Calendar" "2019" "Private")
	    "** %?\n   SCHEDULED: <%(org-read-date)>\n"
	    :prepend t)
	   ("w" "Add an event to the work calendar." entry
	    (file+olp schedule-file "Calendar" "2019" "Work")
	    "** %?\n   SCHEDULED: <%(org-read-date)>\n")
	   ("l" "Store the link of the current position in the clocking task." item
	    (clock)
	    "- %A\n"
	    :immediate t :prepend t))))
    #+END_SRC
*** org-mode clock 配置
    #+BEGIN_SRC elisp :eval never :exports code
      (use-package org
	:custom
	(org-clock-in-resume t)
	;; Save clock data and notes in the LOGBOOK drawer
	(org-clock-into-drawer t)
	;; Save state changes in the LOGBOOK drawer
	(org-log-into-drawer t)
	;; Removes clocked tasks with 0:00 duration
	(org-clock-out-remove-zero-time-clocks t)
	;; Show clock sums as hours and minutes, not "n days" etc.
	(org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
	;; (org-agenda-current-time-string "------------NOW------------")
	(org-clock-persist t)
	:preface
	(setq m/pomodoro/focus 45)
	(setq m/pomodoro/break 5)
	(setq m/pomodoro/task/current nil)
	(setq m/pomodoro/task/next nil)
	(setq m/pomodoro/status/updater nil)
	(defun m/org-clock-out-and-save-when-exit ()
	  "Save buffers and stop clocking when kill emacs."
	  (ignore-errors (org-clock-out) t)
	  (save-some-buffers t))
	(defun m/pomodoro/reset ()
	  "timer update"
	  (if (and (boundp 'm/pomodoro/task/current) (timerp m/pomodoro/task/current))
	      (cancel-timer m/pomodoro/task/current)
	    (setq m/pomodoro/task/current nil))

	  (if (and (boundp 'm/pomodoro/task/next) (timerp m/pomodoro/task/next))
	      (cancel-timer m/pomodoro/task/next)
	    (setq m/pomodoro/task/next nil))

	  (if (and (boundp 'm/pomodoro/status/updater) (timerp m/pomodoro/status/updater))
	      (cancel-timer m/pomodoro/status/updater)
	    (setq m/pomodoro/status/updater nil)))
	(defun m/clockin ()
	  "clockin hook"
	  (m/pomodoro/reset)
	  (setq m/pomodoro/status/updater (run-at-time 0 60 '(lambda ()
							       (setq org-mode-line-string (m/task-clocked-time))
							       (force-mode-line-update))))
	  (setq m/pomodoro/task/current (run-at-time (* m/pomodoro/focus 60) nil (lambda() (org-clock-out)))))
	(defun m/clockout ()
	  "clock out hook"
	  (m/pomodoro/reset)
	  (setq m/pomodoro/task/next (run-at-time (* m/pomodoro/break 60) nil (lambda()
										(ignore-errors
										  (request "http://127.0.0.1:13140"
										    :type "POST"
										    :data (json-encode `(("type" . "FOCUS")
													 ("title" . "Ready to work")
													 ("duration" . 5)))
										    :headers '(("Content-Type" . "application/json"))))))))
	(defun m/task-clocked-time ()
	  "Return a string with the clocked time and effort, if any"
	  (interactive)
	  (let* ((clocked-time (org-clock-get-clocked-time))
		 (h (truncate clocked-time 60))
		 (m (mod clocked-time 60))
		 (work-done-str (format "%d:%02d" h m)))
	    (if org-clock-effort
		(let* ((effort-in-minutes
			(org-duration-to-minutes org-clock-effort))
		       (effort-h (truncate effort-in-minutes 60))
		       (effort-m (truncate (mod effort-in-minutes 60)))
		       (effort-str (format "%d:%02d" effort-h effort-m)))
		  (format "%s/%s" work-done-str effort-str))
	      (format "%s" work-done-str))))
	:hook
	(kill-emacs . m/org-clock-out-and-save-when-exit)
	(org-clock-in .
		      (lambda ()
			(m/clockin)
			(ignore-errors (request "http://127.0.0.1:13140"
					 :type "POST"
					 :data (json-encode `(("type" . "FOCUSED")
							      ("title" . ,(or org-clock-current-task "interrupt task"))
							      ("duration" . 45)))
					 :headers '(("Content-Type" . "application/json"))))))
	(org-clock-out . (lambda ()
			   (m/clockout)
			   (ignore-errors
			     (request "http://127.0.0.1:13140"
			       :type "POST"
			       :data (json-encode `(("type" . "UNFOCUSED")
						    ("title" . "Have a rest")
						    ("duration" . 5)))
			       :headers '(("Content-Type" . "application/json"))))))
	(org-clock-in-last . (lambda ()
			       (m/clockin)
			       (ignore-errors
				 (request "http://127.0.0.1:13140"
				   :type "POST"
				   :data (json-encode `(("type" . "FOCUSED")
							("title" . ,(or org-clock-current-task "interrupt task"))
							("duration" . 45)))
				   :headers '(("Content-Type" . "application/json")))))))
    #+END_SRC
*** org-mode export 配置
    允许在 org 文件中通过 bind 修改环境中绑定的值。
    #+BEGIN_SRC elisp :exports code :eval never
      (use-package org
	:custom
	(org-export-allow-bind-keywords t))
    #+END_SRC

*** org-mode ditaa/plantuml 画图

    #+BEGIN_SRC elisp :exports code :eval never
      (use-package org
	:custom
	(org-ditaa-jar-path (expand-file-name "ditaa.jar" m/conf.d))
	(org-plantuml-jar-path (expand-file-name "plantuml.jar" m/conf.d))
	:config
	(unless (and (boundp 'org-ditaa-jar-path)
		     (file-exists-p org-ditaa-jar-path)
		     (not (file-directory-p org-ditaa-jar-path)))
	  (let ((jar-name "ditaa.jar")
		(url "https://github.com/stathissideris/ditaa/releases/download/v0.11.0/ditaa-0.11.0-standalone.jar"))
	    (setq org-ditaa-jar-path (expand-file-name jar-name m/conf.d))
	    (unless (file-exists-p org-ditaa-jar-path)
	      (url-copy-file url org-ditaa-jar-path))))

	(unless (and (boundp 'org-plantuml-jar-path)
		     (file-exists-p org-plantuml-jar-path)
		     (not (file-directory-p org-plantuml-jar-path)))
	  (let ((jar-name "plantuml.jar")
		(url "https://downloads.sourceforge.net/project/plantuml/1.2020.2/plantuml.1.2020.2.jar"))
	    (setq org-plantuml-jar-path (expand-file-name jar-name m/conf.d))
	    (unless (file-exists-p org-plantuml-jar-path)
	      (url-copy-file url org-plantuml-jar-path)))))

      (use-package plantuml-mode
	:after org
	:config
	(add-to-list
	 'org-src-lang-modes '("plantuml" . plantuml))
	(setq plantuml-jar-path org-plantuml-jar-path)
	(setq plantuml-default-exec-mode 'jar))
    #+END_SRC

*** org-mode graphiz 画图配置
    #+BEGIN_SRC elisp :eval never :exports code
      (use-package graphviz-dot-mode
	:after org
	:config
	(setq graphviz-dot-indent-width 4))
      (use-package company-graphviz-dot
	:after company
	:ensure nil)
    #+END_SRC
*** org mode 可以拖拽下载
    #+BEGIN_SRC elisp :eval never :exports code
      ;; Download Drag&Drop images
      (use-package org-download
	:after (org))
    #+END_SRC

*** org mode 图标设置
    #+BEGIN_SRC elisp :eval never :exports code
      ;; Pretty bullets
      (use-package org-bullets
	:after org
	:hook (org-mode . org-bullets-mode)
	:config
	(setq org-bullets-face-name (quote org-bullet-face))
	(org-bullets-mode 1)
	(setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥")))
    #+END_SRC

*** org-mode 博客
    #+BEGIN_SRC elisp :eval never :exports code
      (use-package ox-gfm)
      (use-package ox-hugo
	:after (ox org)
	:custom
	(org-blackfriday--org-element-string '((src-block . "Code")
					       (table . "Table")
					       (figure . "Figure"))))
    #+END_SRC

*** org-mode 中文对齐配置
    #+BEGIN_SRC elisp :eval never :exports code
      (use-package valign
	:custom
	(valign-fancy-bar 't)
	:hook
	(org-agenda-finalize . valign-region)
	(org-agenda-mode . valign-mode))
    #+END_SRC
*** org-mode retrospect temlate
    #+BEGIN_SRC org :tangle "~/agendas/retrospect.tmpl" :noweb yes :mkdirp yes
      |----------------------------+----|
      | 昨天学到什么？             | %? |
      |----------------------------+----|
      | 昨天得到什么教训？         |    |
      |----------------------------+----|
      | 费曼学习法实践案例？       |    |
      |----------------------------+----|
      | 昨天做了哪些换位思考？     |    |
      |----------------------------+----|
      | 昨天做了哪些倒推思维训练？ |    |
      |----------------------------+----|
      | 昨天发生的事情             |    |
      | 我能提出什么问题           |    |
      |----------------------------+----|
      | 接下来有什么计划？         |    |
      |                            |    |
      |                            |    |
      |                            |    |
      |----------------------------+----|
    #+END_SRC

*** org-mode code template
    #+BEGIN_SRC org :tangle "~/agendas/snippet.tmpl" :noweb yes :mkdirp yes
      ,**** %^{purpose of the snippet} 
	   ,#+BEGIN_SRC %^{language|shell|elisp|c|c++} :eval never :exports code
	       %?
	   ,#+END_SRC
    #+END_SRC

*** org-mode vocabulary template
    #+BEGIN_SRC org :tangle "~/agendas/vocabulary.tmpl" :noweb yes :mkdirp *
      | %? |   |
    #+END_SRC
*** org-mode meeting template
    #+BEGIN_SRC org :tangle "~/agendas/meeting.tmpl" :noweb yes :mkdirp yes
      ,**** %^{会议主题}
	   |--------------+----|
	   | 哪些 Action? | %? |
	   |--------------+----|
	   | 有哪些洞见？ |    |
	   |--------------+----|
	   | 有那些问题？ |    |
	   |--------------+----|
    #+END_SRC

*** org-mode gtd files
    #+BEGIN_SRC org :tangle no :noweb yes :mkdirp yes
      ,#+CATEGORY: Inbox
      ,#+FILETAGS: INBOX
    #+END_SRC
** provide
   #+BEGIN_SRC elisp :eval never :exports code
     (provide 'init-literate)
   #+END_SRC
