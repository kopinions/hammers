#+TITLE:  Emacs 启动文件
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** 错误提醒相关
   当发生错误的时候，打印错错误的堆栈信息。
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     ;;(setq url-proxy-services '(("https" . "127.0.0.1:1089")
     ;;                        ("http" . "127.0.0.1:1089")))
     (setq debug-on-error t)
   #+END_SRC

** 版本配置
   配置文件使用了一些特性，这些特性在太久的版本上会出现不兼容。对比版本给出相应的提示信息。

   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     (let ((minver "24.4"))
       (when (version< emacs-version minver)
	 (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
     (when (version< emacs-version "25.1")
       (message "Your Emacs is old, and some functionality in this config will be disabled. Please upgrade if possible."))
   #+END_SRC

** 系统配置

   #+HEADER: :var conf.d=(or (and (boundp 'm/conf.d) (file-directory-p m/conf.d) m/conf.d) (expand-file-name user-emacs-directory))
   #+HEADER: :var home.d=(or (and (boundp 'm/home.d) (file-directory-p m/home.d) m/home.d) (expand-file-name "~"))
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     (defconst m/os
       (let ((os (symbol-name system-type)))
	 (cond ((string= os "darwin") 'macos)
	       ((string-prefix-p "gnu" os) 'linux)
	       ((or (string-prefix-p "ms" os) (string-prefix-p "windows" os)) 'windows))))

     (defvar m/conf.d conf.d)
     (defvar m/home.d home.d)
   #+END_SRC

   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     (global-unset-key (kbd "M-`"))
   #+END_SRC


** 是否开启离线模式
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     (defvar m/offline 
       (file-directory-p (expand-file-name "offline" m/conf.d)))
   #+END_SRC

** 垃圾回收设置
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     (setq gc-cons-threshold 100000000)
   #+END_SRC
** 包管理配置
   Emacs 通过插件机制来提高可扩展性，我们可以通过安装插件来灵活的扩展 Emacs 的功能。 插件被封装成适用于 Emacs 的安装包，被存放在插件仓库（软件包仓库）中，以便与用户下载安装。
   Emacs 通过包管理器来管理插件的：安装、配置、装载、升级。
*** 包管理器配置
    Emacs 的包管理器名为：[[http://tromey.com/elpa/][package]]. 但是 package 默认配置插件仓库包含的插件相对较少，我们需要添加一些常用的第三方插件仓库，以便与搜索与安装插件。

    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
      (setq load-path
	    (delq nil (mapcar
		       (function (lambda (p)
				   (unless (string-match "lisp\\(/packages\\)?/org$" p)
				     p)))
		       load-path)))
      ;; remove property list to defeat cus-load and remove autoloads
      (mapatoms (function  (lambda (s)
			     (let ((sn (symbol-name s)))
			       (when (string-match "^\\(org\\|ob\\|ox\\)\\(-.*\\)?$" sn)
				 (setplist s nil)
				 (when (eq 'autoload (car-safe s))
				   (unintern s)))))))
      
      (require 'package)
	;;; Install into separate package dirs for each Emacs version, to prevent bytecode incompatibility
      (let ((versioned-package-dir
	     (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
			       m/conf.d)))
	(setq package-user-dir versioned-package-dir))
      
      (if m/offline
	  (setq package-archives `(("gnu" . ,(expand-file-name "offline/gnu" m/conf.d))
				   ("melpa" . ,(expand-file-name "offline/melpa" m/conf.d))
				   ("stable-melpa" . ,(expand-file-name "offline/stable-melpa" m/conf.d))))
	(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			    (not (gnutls-available-p))))
	       (proto (if no-ssl "http" "https")))
	  (if no-ssl
	      (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
				       ("melpa" . "http://elpa.emacs-china.org/melpa/")
				       ("stable-melpa" . "http://elpa.emacs-china.org/stable-melpa/")))
	    (unless no-ssl
	      (setq package-archives '(("gnu"   . "https://elpa.emacs-china.org/gnu/")
				       ("melpa" . "https://elpa.emacs-china.org/melpa/")
				       ("stable-melpa" . "https://elpa.emacs-china.org/stable-melpa/")
				       ))))))
      
      ;; Work-around for https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341
      (when (version= "26.2" emacs-version)
	(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
      
      (package-initialize)
      (package-refresh-contents)
    #+END_SRC
*** use package
    Emacs 常见的配置管理都是先使用包管理器安装对应的包，然后再进行配置。安装包和配置是割裂开的。对于使用多个包的情况，安装包配置会分散到各个地方，安装包相关的配置会变得难以维护。
    [[https://github.com/jwiegley/use-package][use-package]] 提供了一个非常干净简洁的安装包配置的方式。use-package 可以将安装包的配置隔离开，使得 Emacs 配置文件干净简洁。

    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
      (unless (and 
	       (package-installed-p 'use-package)
	       (package-installed-p 'diminish))
	(package-refresh-contents)
	(package-install 'use-package)
	(package-install 'diminish))

      (eval-when-compile (require 'use-package))
      (require 'diminish)
      (setq use-package-always-ensure t)

      (use-package auto-package-update
	:config
	(setq auto-package-update-delete-old-versions t)
	(setq auto-package-update-hide-results t)
	(auto-package-update-maybe))

      (use-package use-package-ensure-system-package
	:ensure t)
    #+END_SRC

*** 包加载路径配置
    所有的自定义的配置文件都在 emacs 配置文件夹下的 lisp 目录下。所以我们需要将 lisp 目录添加到加载路径中
    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
      (add-to-list 'load-path (expand-file-name "lisp" m/conf.d))
      (setq custom-file (expand-file-name "custom.el" m/conf.d))
    #+END_SRC

*** 保证永远使用最新的 lisp 配置文件，或者库文件
    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
      (use-package auto-compile
	:ensure t
	:custom (load-prefer-newer t)
	:config
	(auto-compile-on-load-mode)
	(auto-compile-on-save-mode))
    #+END_SRC

 
** 自定义配置聚合

   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     (defconst m/load-path (lambda () (list 
				       (expand-file-name "lisp" m/conf.d)
				       (expand-file-name "verilog-mode" (expand-file-name "3rdparty" m/conf.d))
				       (expand-file-name "lsp-ivy" (expand-file-name "3rdparty" m/conf.d))
				       (expand-file-name "librime" (expand-file-name "3rdparty" m/conf.d))
				       (expand-file-name "liberime" (expand-file-name "3rdparty" m/conf.d)))))
     (use-package init-common
       :load-path m/load-path)
     (use-package init-os
       :load-path m/load-path)
     (use-package init-ui
       :load-path m/load-path)
     (use-package init-correction
       :load-path m/load-path)
     (use-package init-project
       :load-path m/load-path)
     (use-package init-literate
       :load-path m/load-path)
     (use-package init-vcs
       :load-path m/load-path)
     (use-package init-lsp
       :load-path m/load-path)
     (use-package init-editing
       :load-path m/load-path)
     (use-package init-chinese
       :load-path m/load-path)
     (use-package init-languages
       :load-path m/load-path)
     (use-package init-terminal
       :load-path m/load-path)
     (use-package init-completion
       :load-path m/load-path)
     (use-package init-email
       :load-path m/load-path)
     (use-package init-macros
       :load-path m/load-path)
   #+END_SRC
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/conf.d}/init.el") :comments link
     (provide 'init)
   #+END_SRC
