#+TITLE: Emacs early-init related
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com
#+DATE: 2024-09-25
#+UPDATED: 2024-09-25
#+LAYOUT: post
#+EXCERPT:  
#+DESCRIPTION: 
#+TAGS: 
#+CATEGORIES: 
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil \n:nil ^:nil *:t <:t -:t f:t |:t ::t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+BIND:        org-preview-latex-image-directory ""
#+OPTIONS:     tex:imagemagick

#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LaTeX_CLASS_OPTIONS: [koma,a5paper,landscape,twocolumn,utopia,10pt,listings-sv,microtype,paralist]
# No need for a table of contents, unless your paper is quite long.
# Use fancy looking fonts. If you don't have MinionPro installed,
# a good alternative is the Palatino-style pxfonts.
# See: [[http://www.tug.dk/FontCatalogue/pxfonts/][http://www.tug.dk/FontCatalogue/pxfonts/]]
#+LATEX_HEADER:\usepackage{xeCJK}
#+LATEX_HEADER: \usepackage[scaled=.875]{inconsolata}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[scaled]{beraserif}
#+LATEX_HEADER: \usepackage[scaled]{berasans}
#+LATEX_HEADER: \usepackage[scaled]{beramono}
# Set the spacing to double, as required in most papers.
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \doublespacing
# Fix the margins
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
# This line makes lists work better:
# It eliminates whitespace before/within a list and pushes it tt the left margin
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \setlist[enumerate,itemize]{noitemsep,nolistsep,leftmargin=*}
# I always include this for my bibliographies
#+LATEX_HEADER: \usepackage[notes,isbn=false,backend=biber]{biblatex-chicago}
#+NAME: attr
#+BEGIN_SRC sh :var data="" :var width="\textwidth" :results output :exports none
  echo "#+ATTR_LATEX: :width $width"
  echo "#+ATTR_ORG: :width $width"
  echo "$data"
#+END_SRC

** 系统变量配置
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/early-init.el") :comments link
     (defconst m/home.d (directory-file-name (expand-file-name "~")))
     (defconst m/xdg.conf.d (expand-file-name ".config" m/home.d))
     (defconst m/xdg.cache.d (expand-file-name ".cache" m/home.d))
     (defconst m/xdg.data.d (expand-file-name ".local/share" m/home.d))
     (defconst m/xdg.state.d (expand-file-name ".local/state" m/home.d))
     (defconst m/emacs.d (expand-file-name "emacs" m/xdg.conf.d))
     (defconst m/emacs.conf.d (expand-file-name "emacs" m/xdg.conf.d))
     (defconst m/emacs.data.d (expand-file-name "emacs" m/xdg.data.d))
     (defconst m/emacs.state.d (expand-file-name "emacs" m/xdg.state.d))
     (defconst m/emacs.cache.d (expand-file-name "emacs" m/xdg.cache.d))
     (defconst m/mail.d (expand-file-name "mails" m/home.d))
   #+END_SRC

** native compile 配置
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/early-init.el") :comments link
     ;; (setenv "PATH" "")
     ;; (setenv "LIBRARY_PATH" "")
     ;; (setenv "LD_LIBRARY_PATH" "")
     ;; (setq native-comp-driver-options "")
     (startup-redirect-eln-cache (expand-file-name "eln-cache" m/emacs.state.d))
     (setq package-native-compile t)
     (add-to-list 'default-frame-alist '(undecorated . t))

     ;;; Install into separate package dirs for each Emacs version, to prevent bytecode incompatibility
     (let ((versioned-package-dir
            (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                              m/emacs.state.d)))
       (setq package-user-dir versioned-package-dir))
   #+END_SRC
** 加载机器相关配置文件
   机器相关的配置可以放在 ${m/emacs.conf.d}/lisp/machine-local.el 中，示例代码如下
   #+BEGIN_SRC elisp :eval never :exports code :noweb yes
     (setq lsp-clangd-binary-path "/path/to/clangd")
     (provide 'machine-local)
   #+END_SRC

   如果不存在这样的文件，则不会进行加载
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/early-init.el") :comments link
     (let* ((context-file (expand-file-name "lisp/machine-local.el" m/emacs.conf.d))
            (load-path (list (file-name-directory context-file))))
       (if (and (file-exists-p context-file) (file-readable-p context-file))
           (require 'machine-local)))
   #+END_SRC

