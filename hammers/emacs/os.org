#+TITLE: OS Specific
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: Emacs config for specific operation system
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** macos
*** 键位设置
    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
      (when (eq m/os 'macos)
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super))
    #+END_SRC
** linux
*** 键位设置
    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
      (when (eq m/os 'linux)
        (setq x-super-keysym 'super
              x-meta-keysym 'meta))
    #+END_SRC
*** 剪切板管理
    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
      (use-package xclip
        :if (eq m/os 'linux)
        :config
        (xclip-mode 1))
    #+END_SRC
*** 环境变量
    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
      (use-package exec-path-from-shell
        :custom
        (exec-path-from-shell-variables '(
                                          "PATH"
                                          "MANPATH"
                                          "XDG_CONFIG_HOME"
                                          "XDG_DATA_HOME"
                                          "XDG_CACHE_HOME"
                                          "XDG_STATE_HOME"
                                          "GNUPGHOME"
                                          "PROXYCHAINS_CONF_FILE"
                                          "NOTMUCH_CONFIG"
                                          "MIMETYPES"
                                          "MAILCAPS"
                                          ))
        :config
        (when (memq m/os '(macos linux))
          (exec-path-from-shell-initialize)))
    #+END_SRC
    
** 编辑历史相关配置
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
     (use-package recentf
       :custom
       (recentf-save-file (expand-file-name "recentf" m/emacs.state.d))
       (recentf-max-menu-items 30)
       (recentf-max-saved-items 200)
       :config
       (recentf-mode 1))

     (use-package savehist
       :custom
       (savehist-file (expand-file-name "history" m/emacs.state.d))
       :config
       (savehist-mode 1))
   #+END_SRC

** 项目相关
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
     (use-package projectile
       :init
       (setq projectile-sort-order 'recently-active)
       (setq projectile-cache-file (expand-file-name "projectile.cache" m/emacs.state.d))
       (setq projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" m/emacs.state.d)))
   #+END_SRC

** emacs server
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
     (use-package server
       :config
       (unless (server-running-p) (server-start)))
   #+END_SRC

** http
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
     (use-package request
       :custom
       (request-storage-directory (expand-file-name "request" m/emacs.state.d)))
     (use-package url
       :custom
       (url-configuration-directory (expand-file-name "url" m/emacs.state.d)))
   #+END_SRC
   
** 导出
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-os.el") :comments link
     (provide 'init-os)
   #+END_SRC
