#+TITLE: 中文配置
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** 中文字体配置
   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-chinese.el") :comments link
     (use-package cnfonts
       :ensure t
       :if (display-graphic-p)
       :init (setq cnfonts-verbose nil)
       :config
       (setq cnfonts-use-face-font-rescale t)
       (cnfonts-enable))
   #+END_SRC

** 输入法配置

   #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-chinese.el") :comments link
     (use-package posframe)
     (use-package pyim
       :diminish pyim-isearch-mode
       :after posframe
       :preface
       (defun m/dict(path)
         `(:name ,(file-name-nondirectory path)
                 :file ,path))
       (defun m/dicts()
         (mapcar 'm/dict (m/files "${m/xdg.conf.d}/emacs/pyim/dicts/*.pyim" t)))
       :custom
       (pyim-outcome-trigger nil)
       :config
       ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
       (setq pyim-dicts (m/dicts))
       (use-package pyim-basedict
         :ensure t
         :config (pyim-basedict-enable))

       (setq default-input-method "pyim")

       ;; 使用全拼
       (setq pyim-default-scheme 'quanpin)

       ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
       ;; 我自己使用的中英文动态切换规则是：
       ;; 1. 光标只有在注释里面时，才可以输入中文。
       ;; 2. 光标前是汉字字符时，才能输入中文。
       ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
       (setq-default pyim-english-input-switch-functions
                     '(pyim-probe-dynamic-english
                       pyim-probe-isearch-mode
                       pyim-probe-program-mode
                       pyim-probe-org-structure-template))

       (setq-default pyim-punctuation-half-width-functions
                     '(pyim-probe-punctuation-line-beginning
                       pyim-probe-punctuation-after-punctuation))
       (setq pyim-fuzzy-pinyin-alist '(("en" "eng") ("in" "ing") ("un" "ong")))

       ;; 开启拼音搜索功能
       (pyim-isearch-mode 1)

       ;; 使用 pupup-el 来绘制选词框, 如果用 emacs26, 建议设置
       ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
       ;; 手动安装 posframe 包。
       (setq pyim-page-tooltip 'posframe)

       ;; 选词框显示5个候选词
       (setq pyim-page-length 5)

       :bind
       (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
        ("C-;" . pyim-delete-word-from-personal-buffer)
        ("M-f" . pyim-forward-word)
        ("M-b" . pyim-backward-word)
        :map pyim-mode-map
        ("C-n" . pyim-page-next-page)
        ("C-p" . pyim-page-previous-page)
        )
       :hook 
       ((emacs-startup . pyim-restart-1))
       )
   #+END_SRC

** rime 输入法配置

*** 安装 librime
    #+HEADER: :var emacs_conf=(m/resolve "${m/xdg.conf.d}/emacs")
    #+BEGIN_SRC shell :eval (or (and (eq m/os 'macos) "yes") "never") :shebang #!/bin/bash :exports none :tangle no :results output silent :noweb yes :prologue "exec 2>&1" :epilogue ":" :comments link
      cd ${emacs_conf}/3rdparty/librime
      git clean -fdx
      git submodule update --init
      export LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/opt/icu4c/lib
      make xcode/thirdparty/boost -j `nproc`
      make xcode/thirdparty -j `nproc`
      make xcode -j `nproc`
      make install -j `nproc`
    #+END_SRC

*** 安装 liberime

    #+BEGIN_SRC elisp :eval never :exports code :tangle (or (and (eq m/os 'macos) (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-chinese.el")) "no") :comments link
      (use-package liberime
        :if (eq m/os 'macos)
        :after pyim
        :init
        (setenv "RIME_PATH" (expand-file-name "librime" (expand-file-name "emacs/3rdparty" m/xdg.conf.d)))
        :config
        (liberime-load)
        :hook
        (liberime-after-start . (lambda ()
                                  (let ((buf (get-buffer "*liberime message*")))
                                    (if buf (with-current-buffer buf
                                              (kill-this-buffer)
                                              (if (not (one-window-p))
                                                  (delete-window)))))
                                  ;; Select schema delay 5 second, make sure
                                  ;; `liberime-load' run finish.
                                  (run-with-timer
                                   5 1
                                   (ignore-errors (lambda ()
                                                    (liberime-select-schema "luna_pinyin_simp")
                                                    (setq pyim-default-scheme 'rime)))))))
    #+END_SRC

*** 修复 liberime-core.so 的链接的问题（@rpath librime not found）

    #+HEADER: :var erime_path=(m/resolve "${m/xdg.conf.d}/emacs/3rdparty/liberime")
    #+HEADER: :var rime_path=(m/resolve "${m/xdg.conf.d}/emacs/3rdparty/librime")
    #+HEADER: :var emacs_major=(format "%d" emacs-major-version)
    #+BEGIN_SRC shell :eval never :shebang #!/bin/bash :exports none :tangle no :results output silent :noweb yes :prologue "exec 2>&1" :epilogue ":" :comments link
      export RIME_PATH=${rime_path}
      export EMACS_MAJOR_VERSION=${emacs_major}
      cd ${erime_path}
      make clean && make
      otool -l ${erime_path}/src/liberime-core.so \
          | grep "${rime_path}/build/lib" \
          | sed -r 's#path ([a-zA-Z0-9./:]+)[[:space:]].*#\1#g' \
          | xargs -I {} install_name_tool -delete_rpath {} ${erime_path}/src/liberime-core.so
      install_name_tool -add_rpath "${rime_path}/build/lib/Release" ${erime_path}/src/liberime-core.so
    #+END_SRC

*** liberime 配置文件 
    #+BEGIN_SRC yaml :tangle (m/resolve "${m/xdg.conf.d}/emacs/rime/default.custom.yaml") :noweb yes :eval never :exports code
      patch:
        menu/page_size: 100
        speller/auto_select: false
        speller/auto_select_unique_candidate: false
        schema_list: 
          - schema: luna_pinyin_simp
    #+END_SRC
    
*** 导出
    #+BEGIN_SRC elisp :eval never :exports code :tangle (m/resolve "${m/xdg.conf.d}/emacs/lisp/init-chinese.el")) :comments link
      (provide 'init-chinese)
    #+END_SRC
