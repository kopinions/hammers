#+TITLE:  Language Server Protocol
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+PROPERTY:    header-args:elisp  :tangle "~/.emacs.d/lisp/init-lsp.el"
#+PROPERTY:    header-args:shell  :tangle no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** lsp-mode

#+BEGIN_SRC elisp :eval never :exports code
(use-package lsp-mode
  :ensure t
  :custom
  ;; debug
  (lsp-log-io t)
  (lsp-trace nil)
  (lsp-print-performance nil)
  ;; general
  (lsp-auto-guess-root t)
  (lsp-document-sync-method 'incremental) ;; none, full, incremental, or nil
  (lsp-response-timeout 15)
  (lsp-prefer-flymake nil) ;; t(flymake), nil(lsp-ui), or :none
  ;; go-client
  (lsp-clients-go-server-args '("--cache-style=always" "--diagnostics-style=onsave" "--format-style=goimports"))
  (lsp-clients-clangd-args '("-j=8" "--pch-storage=memory" "-background-index" "-log=error" "--compile-commands-dir=build" "--clang-tidy" "--completion-style=bundled"))
  :hook
  (c-mode-common . lsp)
  :bind
  (:map lsp-mode-map
        ("C-c r"   . lsp-rename))
  :config
  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list
    )
  ;; LSP UI tools
  (use-package lsp-ui
    :ensure t
    :custom
    ;; lsp-ui-doc
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature nil)
    (lsp-ui-doc-position 'at-point) ;; top, bottom, or at-point
    (lsp-ui-doc-max-width 120)
    (lsp-ui-doc-max-height 30)
    (lsp-ui-doc-use-childframe t)
    (lsp-ui-doc-use-webkit t)
    ;; lsp-ui-flycheck
    (lsp-ui-flycheck-enable nil)
    ;; lsp-ui-sideline
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-symbol t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-diagnostics nil)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-code-actions-prefix "")
    ;; lsp-ui-imenu
    (lsp-ui-imenu-enable t)
    (lsp-ui-imenu-kind-position 'top)
    ;; lsp-ui-peek
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-peek-height 80)
    (lsp-ui-peek-list-width 150)
    (lsp-ui-peek-fontify 'on-demand) ;; never, on-demand, or always
    :preface
    (defun m/toggle-lsp-ui-doc ()
      (interactive)
      (if lsp-ui-doc-mode
          (progn
            (lsp-ui-doc-mode -1)
            (lsp-ui-doc--hide-frame))
        (lsp-ui-doc-mode 1)))
    :bind
    (:map lsp-mode-map
          ("M-?" . lsp-ui-peek-find-references)
          ("M-." . lsp-ui-peek-find-definitions)
          ("C-c C-i" . lsp-ui-peek-find-implementation)
          ("C-c m"   . lsp-ui-imenu)
          ("C-c s"   . lsp-ui-sideline-mode)
          ("C-c d"   . m/toggle-lsp-ui-doc))
    :hook
    (lsp-mode . lsp-ui-mode)))
   #+END_SRC

** emacs debug adaptor protocol
#+BEGIN_SRC json :eval never :exports code :tangle ~/.vscode/extensions/llvm-org.lldb-vscode-0.1.0/package.json
{
	"name": "lldb-vscode",
	"displayName": "LLDB native Debug stub",
	"version": "0.1.0",
	"publisher": "llvm.org",
	"description": "Debug adapter for LLDB which uses a C++ tool to interface directly with LLDB.",
	"author": {
		"name": "Greg Clayton",
		"email": "clayborg@gmail.com"
	},
	"license": "LLVM",
	"keywords": [
		"multi-root ready"
	],
	"engines": {
		"vscode": "^1.18.0",
		"node": "^7.9.0"
	},
	"icon": "images/lldb.png",
	"categories": [
		"Debuggers"
	],
	"private": true,
	"devDependencies": {
		"@types/node": "7.0.43",
		"@types/mocha": "2.2.45",
		"typescript": "2.6.2",
		"mocha": "4.0.1",
		"vscode": "1.1.10",
		"vscode-debugadapter-testsupport": "1.25.0",
		"tslint": "5.8.0",
		"vsce": "1.35.0"
	},
	"contributes": {
		"debuggers": [
			{
				"type": "lldb-vscode",
				"label": "Native LLDB Debugger",
				"enableBreakpointsFor": {
					"languageIds": [
						"ada",
						"arm",
						"asm",
						"c",
						"cpp",
						"crystal",
						"d",
						"fortan",
						"fortran-modern",
						"nim",
						"objective-c",
						"objectpascal",
						"pascal",
						"rust",
						"swift"
					]
				},
				"program": "./bin/lldb-vscode",
				"windows": {
					"program": "./bin/lldb-vscode.exe"
				},
				"configurationAttributes": {
					"launch": {
						"required": [
							"program"
						],
						"properties": {
							"program": {
								"type": "string",
								"description": "Path to the program to debug."
							},
							"args": {
								"type": [ "array", "string" ],
								"description": "Program arguments.",
								"default": []
							},
							"cwd": {
								"type": "string",
								"description": "Program working directory.",
								"default": "${workspaceRoot}"
							},
							"env": {
								"type": "array",
								"description": "Additional environment variables.",
								"default": []
							},
							"stopOnEntry": {
								"type": "boolean",
								"description": "Automatically stop after launch.",
								"default": false
							},
							"disableASLR": {
								"type": "boolean",
								"description": "Enable or disable Address space layout randomization if the debugger supports it.",
								"default": true
							},
							"disableSTDIO": {
								"type": "boolean",
								"description": "Don't retrieve STDIN, STDOUT and STDERR as the program is running.",
								"default": false
							},
							"shellExpandArguments": {
								"type": "boolean",
								"description": "Expand program arguments as a shell would without actually launching the program in a shell.",
								"default": false
							},
							"detachOnError": {
								"type": "boolean",
								"description": "Detach from the program.",
								"default": false
							},
							"trace": {
								"type": "boolean",
								"description": "Enable logging of the Debug Adapter Protocol.",
								"default": true
							},
							"sourcePath": {
								"type": "string",
								"description": "Specify a source path to remap \"./\" to allow full paths to be used when setting breakpoints in binaries that have relative source paths."
							},
							"sourceMap": {
								"type": "array",
								"description": "Specify an array of path remappings; each element must itself be a two element array containing a source and desination pathname. Overrides sourcePath.",
								"default": []
							},
							"debuggerRoot": {
								"type": "string",
								"description": "Specify a working directory to set the debug adaptor to so relative object files can be located."
							},
							"initCommands": {
									"type": "array",
									"description": "Initialization commands executed upon debugger startup.",
									"default": []
							},
							"preRunCommands": {
									"type": "array",
									"description": "Commands executed just before the program is launched.",
									"default": []
							},
							"stopCommands": {
									"type": "array",
									"description": "Commands executed each time the program stops.",
									"default": []
							},
							"exitCommands": {
									"type": "array",
									"description": "Commands executed at the end of debugging session.",
									"default": []
							}
						}
					},
					"attach": {
						"properties": {
							"program": {
								"type": "string",
									"description": "Path to the program to attach to."
							},
							"pid": {
								"type": [
										"number",
										"string"
								],
								"description": "System process ID to attach to."
							},
							"waitFor": {
								"type": "boolean",
								"description": "If set to true, then wait for the process to launch by looking for a process with a basename that matches `program`. No process ID needs to be specified when using this flag.",
								"default": true
							},
							"trace": {
								"type": "boolean",
								"description": "Enable logging of the Debug Adapter Protocol.",
								"default": true
							},
							"sourcePath": {
								"type": "string",
								"description": "Specify a source path to remap \"./\" to allow full paths to be used when setting breakpoints in binaries that have relative source paths."
							},
							"sourceMap": {
								"type": "array",
								"description": "Specify an array of path remappings; each element must itself be a two element array containing a source and desination pathname. Overrides sourcePath.",
								"default": []
							},
							"debuggerRoot": {
								"type": "string",
								"description": "Specify a working directory to set the debug adaptor to so relative object files can be located."
							},
							"attachCommands": {
								"type": "array",
								"description": "Custom commands that are executed instead of attaching to a process ID or to a process by name. These commands may optionally create a new target and must perform an attach. A valid process must exist after these commands complete or the \"attach\" will fail.",
								"default": []
							},
							"initCommands": {
								"type": "array",
								"description": "Initialization commands executed upon debugger startup.",
								"default": []
							},
							"preRunCommands": {
								"type": "array",
								"description": "Commands executed just before the program is attached to.",
								"default": []
							},
							"stopCommands": {
								"type": "array",
								"description": "Commands executed each time the program stops.",
								"default": []
							},
							"exitCommands": {
								"type": "array",
									"description": "Commands executed at the end of debugging session.",
									"default": []
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "lldb-vscode",
						"request": "launch",
						"name": "Debug",
						"program": "${workspaceRoot}/<your program>",
						"args": [],
						"env": [],
						"cwd": "${workspaceRoot}"
					}
				],
				"configurationSnippets": [
					{
						"label": "LLDB: Launch",
						"description": "",
						"body": {
							"type": "lldb-vscode",
							"request": "launch",
							"name": "${2:Launch}",
							"program": "^\"\\${workspaceRoot}/${1:<your program>}\"",
							"args": [],
							"env": [],
							"cwd": "^\"\\${workspaceRoot}\""
						}
					}
				]
			}
		]
	}
}
#+END_SRC

#+BEGIN_SRC shell :exports code :tangle no
mkdir -p ~/.vscode/extensions/llvm-org.lldb-vscode-0.1.0/bin/
(which lldb-vscode && ln -s $(which lldb-vscode) ~/.vscode/extensions/llvm-org.lldb-vscode-0.1.0/bin/lldb-vscode) || echo "Please install lldb-vscode"
#+END_SRC

#+BEGIN_SRC elisp :eval never :exports code
  (use-package dap-mode
    :custom
    (dap-lldb-debugged-program-function (lambda () (read-file-name "Select file to debug.")))
    :after lsp-mode posframe
    :config
    (require 'dap-hydra)
    (require 'dap-lldb)  
    (require 'dap-go)
    (require 'dap-ui)
    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    ;; use tooltips for mouse hover
    ;; if it is not enabled `dap-mode' will use the minibuffer.
    (tooltip-mode 1)
    ;; displays floating panel with debug buttons
    ;; requies emacs 26+
    (dap-ui-controls-mode 1))
#+END_SRC
** company lsp

#+BEGIN_SRC elisp :eval never :exports code
(use-package lsp-ivy
  :load-path m/load-path
  :requires lsp-mode
  :config
  (defun m/lsp-ivy-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'lsp-ivy-workspace-symbol)))

  (defun m/lsp-ivy-global-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'lsp-ivy-global-workspace-symbol)))
  :bind
  (:map lsp-mode-map
        ("C-c C-s" . m/lsp-ivy-workspace-symbol-at-point)
        ("C-c C-p" . m/lsp-ivy-global-workspace-symbol-at-point)))
#+END_SRC

#+BEGIN_SRC elisp :eval never :exports code
(use-package company-lsp
  :requires (company yasnippet)
  :after (company yasnippet)
  :custom
  (push 'company-lsp company-backends)
  (company-lsp-cache-candidates nil)
  (company-lsp-async t))

(use-package google-c-style
  :hook
  ((c-mode-common c++-mode-common) . (lambda ()
                          (google-set-c-style)
                          (google-make-newline-indent))))
(use-package cc-mode
  :bind 
    (:map c-mode-base-map
       ("C-c c" . compile)))
#+END_SRC
** provide
#+BEGIN_SRC elisp :eval never :exports code
(provide 'init-lsp)
#+END_SRC
