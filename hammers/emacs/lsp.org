#+TITLE:  Language Server Protocol
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com

#+DESCRIPTION: A literate programming version of my Emacs Initialization script, loaded by the .emacs file.
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+PROPERTY:    header-args:elisp  :tangle "~/.emacs.d/lisp/init-lsp.el"
#+PROPERTY:    header-args:shell  :tangle no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

** lsp-mode

#+BEGIN_SRC elisp
(use-package lsp-mode
  :ensure t
  :custom
  ;; debug
  (lsp-print-io nil)
  (lsp-trace nil)
  (lsp-print-performance nil)
  ;; general
  (lsp-auto-guess-root t)
  (lsp-document-sync-method 'incremental) ;; none, full, incremental, or nil
  (lsp-response-timeout 10)
  (lsp-prefer-flymake nil) ;; t(flymake), nil(lsp-ui), or :none
  ;; go-client
  (lsp-clients-go-server-args '("--cache-style=always" "--diagnostics-style=onsave" "--format-style=goimports"))
  (lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))
  :hook
  ((c-mode c++-mode) . lsp-deferred)
  :bind
  (:map lsp-mode-map
        ("C-c r"   . lsp-rename))
  :config
  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list
    )
  ;; LSP UI tools
  (use-package lsp-ui
    :ensure t
    :custom
    ;; lsp-ui-doc
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature nil)
    (lsp-ui-doc-position 'at-point) ;; top, bottom, or at-point
    (lsp-ui-doc-max-width 120)
    (lsp-ui-doc-max-height 30)
    (lsp-ui-doc-use-childframe t)
    (lsp-ui-doc-use-webkit t)
    ;; lsp-ui-flycheck
    (lsp-ui-flycheck-enable nil)
    ;; lsp-ui-sideline
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-symbol t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-diagnostics nil)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-code-actions-prefix "")
    ;; lsp-ui-imenu
    (lsp-ui-imenu-enable t)
    (lsp-ui-imenu-kind-position 'top)
    ;; lsp-ui-peek
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-peek-height 20)
    (lsp-ui-peek-list-width 50)
    (lsp-ui-peek-fontify 'on-demand) ;; never, on-demand, or always
    :preface
    (defun m/toggle-lsp-ui-doc ()
      (interactive)
      (if lsp-ui-doc-mode
          (progn
            (lsp-ui-doc-mode -1)
            (lsp-ui-doc--hide-frame))
        (lsp-ui-doc-mode 1)))
    :bind
    (:map lsp-mode-map
          ("C-c C-r" . lsp-ui-peek-find-references)
          ("C-c C-d" . lsp-ui-peek-find-definitions)
          ("C-c C-i" . lsp-ui-peek-find-implementation)
          ("C-c m"   . lsp-ui-imenu)
          ("C-c s"   . lsp-ui-sideline-mode)
          ("C-c d"   . m/toggle-lsp-ui-doc))
    :hook
    (lsp-mode . lsp-ui-mode)))
   #+END_SRC


** company lsp

#+BEGIN_SRC elisp
(use-package lsp-ivy
  :load-path (lambda () (expand-file-name "lisp" user-emacs-directory))
  :requires lsp-mode
  :config
  (defun m/lsp-ivy-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'lsp-ivy-workspace-symbol)))

  (defun m/lsp-ivy-global-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'lsp-ivy-global-workspace-symbol)))
  :bind
  (:map lsp-mode-map
        ("C-c C-s" . m/lsp-ivy-workspace-symbol-at-point)
        ("C-c C-p" . m/lsp-ivy-global-workspace-symbol-at-point)))
#+END_SRC

#+BEGIN_SRC elisp
(use-package company-lsp
  :requires (company yasnippet)
  :after (company yasnippet)
  :custom
  (push 'company-lsp company-backends)
  (company-lsp-cache-candidates nil)
  (company-lsp-async t))

(use-package cc-mode
  :bind 
    (:map c-mode-base-map
       ("C-c c" . compile))
  :hook 
  (c-mode-common . (lambda ()
                          (c-set-style "bsd")
                          (setq tab-width 4)
                          (setq c-base-offset 4))))
#+END_SRC



#+BEGIN_SRC elisp

(provide 'init-lsp)

#+END_SRC
